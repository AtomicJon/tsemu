{"mappings":"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","sources":["src/cpu/constants.ts","src/cpu/helpers/checkAddHalfCarry.ts","src/cpu/operations/adc.ts","src/cpu/types.ts","src/cpu/operations/add.ts","src/cpu/operations/and.ts","src/cpu/operations/push.ts","src/cpu/helpers/checkSubtractHalfCarry.ts","src/cpu/operations/cp.ts","src/cpu/operations/dec.ts","src/cpu/operations/ei.ts","src/cpu/operations/inc.ts","src/cpu/operations/jp.ts","src/cpu/operations/ld.ts","src/cpu/operations/nop.ts","src/cpu/operations/or.ts","src/cpu/operations/pop.ts","src/cpu/operations/ret.ts","src/cpu/operations/rl.ts","src/cpu/operations/rlc.ts","src/cpu/operations/rr.ts","src/cpu/operations/rrc.ts","src/cpu/operations/rst.ts","src/cpu/operations/sbc.ts","src/cpu/operations/sub.ts","src/cpu/operations/xor.ts","src/cpu/opCodeMaps/main.ts","src/cpu/operations/rlca.ts","src/cpu/operations/rrca.ts","src/cpu/operations/rla.ts","src/cpu/operations/jr.ts","src/cpu/operations/rra.ts","src/cpu/operations/jrnz.ts","src/cpu/operations/daa.ts","src/cpu/operations/jrz.ts","src/cpu/operations/cpl.ts","src/cpu/operations/jrnc.ts","src/cpu/operations/scf.ts","src/cpu/operations/jrc.ts","src/cpu/operations/ccf.ts","src/cpu/operations/retnz.ts","src/cpu/operations/jpnz.ts","src/cpu/operations/callNz.ts","src/cpu/operations/rst00.ts","src/cpu/operations/retz.ts","src/cpu/operations/jpz.ts","src/cpu/operations/callZ.ts","src/cpu/operations/call.ts","src/cpu/operations/rst08.ts","src/cpu/operations/retnc.ts","src/cpu/operations/jpnc.ts","src/cpu/operations/callNc.ts","src/cpu/operations/rst10.ts","src/cpu/operations/retc.ts","src/cpu/operations/reti.ts","src/cpu/operations/jpc.ts","src/cpu/operations/callC.ts","src/cpu/operations/rst18.ts","src/cpu/operations/rst20.ts","src/cpu/operations/addSp.ts","src/cpu/operations/rst28.ts","src/cpu/operations/di.ts","src/cpu/operations/rst30.ts","src/cpu/operations/ldHlSpE8.ts","src/cpu/operations/rst38.ts","src/cpu/operations/bit.ts","src/cpu/operations/res.ts","src/cpu/operations/set.ts","src/cpu/operations/sla.ts","src/cpu/operations/sra.ts","src/cpu/operations/srl.ts","src/cpu/operations/swap.ts","src/cpu/opCodeMaps/prefixed.ts","src/cpu/Cpu.ts","src/gpu/Ppu.ts","src/io/Joypad.ts","src/memory/MemoryMap.ts","src/util/getHexString.ts","src/util/getBinaryString.ts","src/core/constants.ts","src/audio/Channel.ts","src/audio/Apu.ts","src/core/GB.ts","src/index.ts"],"sourcesContent":["import { ResultFlags } from './types';\n\nexport const DIVIDER_FREQUENCY = 16384;\n\nexport const REG_A = 0;\nexport const REG_F = 1;\nexport const REG_B = 2;\nexport const REG_C = 3;\nexport const REG_D = 4;\nexport const REG_E = 5;\nexport const REG_H = 6;\nexport const REG_L = 7;\n\nexport const REG_AF = 0;\nexport const REG_BC = 2;\nexport const REG_DE = 4;\nexport const REG_HL = 6;\nexport const REG_SP = 8;\nexport const REG_PC = 10;\n\nexport const BIT_FLAG_Z = 0x80;\nexport const BIT_FLAG_N = 0x40;\nexport const BIT_FLAG_H = 0x20;\nexport const BIT_FLAG_C = 0x10;\n\nexport const MASK_FLAG_Z = 0x7f;\nexport const MASK_FLAG_N = 0xbf;\nexport const MASK_FLAG_H = 0xdf;\nexport const MASK_FLAG_C = 0xef;\n\nexport const FLAGS_NO_CHANGE: ResultFlags = {\n  Z: null,\n  N: null,\n  H: null,\n  C: null,\n};\n","/**\n * Check if there is a half carry adding values\n * @param value1 The first value being added\n * @param value2 The second value being added\n * @param plusOne Whether 1 should be added to the result (carry result)\n */\nexport function checkAddHalfCarry(\n  value1: number,\n  value2: number,\n  plusOne: boolean = false,\n) {\n  return (\n    (((value1 & 0x0f) + (value2 & 0x0f) + (plusOne ? 1 : 0)) & 0x10) === 0x10\n  );\n}\n","import Cpu from '../Cpu';\nimport { checkAddHalfCarry } from '../helpers/checkAddHalfCarry';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Add two values plus the carry flag\n * @param cpu The Cpu to operate on\n * @param operands [0] = first value, [1] = the second value\n */\nexport function adc(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const value1 = cpu.readOperand(operands[0]);\n  const value2 = cpu.readOperand(operands[1]);\n\n  const result = value1 + value2 + (cpu.flagC ? 1 : 0);\n  const maskedResult = result & 0xff;\n\n  cpu.writeToOperand(operands[0], maskedResult);\n\n  return {\n    Z: maskedResult === 0,\n    N: false,\n    H: checkAddHalfCarry(value1, value2, cpu.flagC),\n    C: (result & 0x100) === 0x100,\n  };\n}\n","import Cpu from './Cpu';\n\nexport type ResultFlags = {\n  Z: boolean | null;\n  N: boolean | null;\n  H: boolean | null;\n  C: boolean | null;\n};\n\nexport type OpCode = {\n  mnemonic: string;\n  operands: Operand[];\n  bytes: number;\n  cycles: number;\n  action: (cpu: Cpu, operands: Operand[]) => ResultFlags;\n};\n\nexport enum OperandType {\n  Register8 = 'Register8',\n  Register16 = 'Register16',\n  Immediate8 = 'Immediate8',\n  Immediate8Signed = 'Immediate8Signed',\n  Immediate16 = 'Immediate16',\n  Value = 'Value',\n}\n\nexport enum OperandModifier {\n  Increment = 'Increment',\n  Decrement = 'Decrement',\n}\n\nexport type Operand = {\n  type: OperandType;\n  target?: number;\n  isAddress?: boolean;\n  modifier?: OperandModifier;\n};\n","import { REG_SP } from '../constants';\nimport Cpu from '../Cpu';\nimport { checkAddHalfCarry } from '../helpers/checkAddHalfCarry';\nimport { Operand, OperandType, ResultFlags } from '../types';\n\n/**\n * Add two values together and store the result in the first operand\n * @param cpu Cpu to operate on\n * @param operands [0] = first value to add, [1] = second value to add\n */\nexport default function add(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const value1 = cpu.readOperand(operands[0]);\n  const value2 = cpu.readOperand(operands[1]);\n  const result = value1 + value2;\n\n  // Handle 16bit add (except SP)\n  if (\n    operands[0].type === OperandType.Register16 &&\n    operands[0].target !== REG_SP\n  ) {\n    const maskedResult = result & 0xffff;\n\n    cpu.writeToOperand(operands[0], maskedResult);\n    return {\n      Z: null,\n      N: false,\n      H: (((value1 & 0xff) + (value2 & 0xff)) & 0x1000) === 0x1000,\n      C: (result & 0x10000) === 0x10000,\n    };\n  }\n\n  const maskedResult = result & 0xff;\n\n  cpu.writeToOperand(operands[0], maskedResult);\n\n  return {\n    Z: maskedResult === 0,\n    N: false,\n    H: checkAddHalfCarry(value1, value2),\n    C: (result & 0x100) === 0x100,\n  };\n}\n","import Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * AND two values together\n * @param cpu Cpu to operate on\n * @param operands [0] = first value to AND [1] = second value to AND\n */\nexport default function and(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const value1 = cpu.readOperand(operands[0]);\n  const value2 = cpu.readOperand(operands[1]);\n  const result = value1 & value2;\n\n  cpu.writeToOperand(operands[0], result);\n\n  return {\n    Z: result === 0,\n    N: false,\n    H: true,\n    C: false,\n  };\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Push a value onto the stack\n * @param cpu Cpu to operate on\n * @param operands [0] = value to push\n */\nexport default function push(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const value = cpu.readOperand(operands[0]);\n  cpu.SP -= 2;\n  cpu.write16(cpu.SP, value);\n\n  return FLAGS_NO_CHANGE;\n}\n","/**\n * Check if there is a half carry subtracting values\n * @param value1 The value being subtracted from\n * @param value2 The value being subtracted\n * @param plusOne Whether 1 should be subtracted from the result (carry result)\n */\nexport function checkSubtractHalfCarry(\n  value1: number,\n  value2: number,\n  minusOne: boolean = false,\n) {\n  return (\n    (((value1 & 0x0f) - (value2 & 0x0f) - (minusOne ? 1 : 0)) & 0x10) === 0x10\n  );\n}\n","import Cpu from '../Cpu';\nimport { checkSubtractHalfCarry } from '../helpers/checkSubtractHalfCarry';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Compare two values via subtraction\n * @param cpu Cpu to operate on\n * @param operands [0] = the value to subtract from [1] = the value to subtract\n */\nexport default function cp(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const value1 = cpu.readOperand(operands[0]);\n  const value2 = cpu.readOperand(operands[1]);\n  const result = value1 - value2;\n\n  return {\n    Z: result === 0,\n    N: true,\n    H: checkSubtractHalfCarry(value1, value2),\n    C: result < 0,\n  };\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport { checkSubtractHalfCarry } from '../helpers/checkSubtractHalfCarry';\nimport { Operand, OperandType, ResultFlags } from '../types';\n\n/**\n * Decrement a value by 1\n * @param cpu Cpu to operate on\n * @param operands [0] = value/destination to decrement\n */\nexport default function dec(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const value = cpu.readOperand(operands[0]);\n  const result = value - 1;\n  const maskedResult =\n    operands[0].type === OperandType.Register16 && !operands[0].isAddress\n      ? result & 0xffff\n      : result & 0xff;\n  cpu.writeToOperand(operands[0], maskedResult);\n\n  // 16 bit operations don't affect flags\n  if (operands[0].type === OperandType.Register16 && !operands[0].isAddress) {\n    return FLAGS_NO_CHANGE;\n  }\n\n  return {\n    Z: result === 0,\n    N: true,\n    H: checkSubtractHalfCarry(value, 1),\n    C: null,\n  };\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport { ResultFlags } from '../types';\n\n/**\n * Enable interrupts\n * @param cpu Cpu to operate on\n */\nexport default function ei(cpu: Cpu): ResultFlags {\n  cpu.interruptsEnabled = true;\n\n  return FLAGS_NO_CHANGE;\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport { checkAddHalfCarry } from '../helpers/checkAddHalfCarry';\nimport { Operand, OperandType, ResultFlags } from '../types';\n\n/**\n * Increment a value by 1\n * @param cpu Cpu to operate on\n * @param operands [0] = value/destination to increment\n */\nexport default function inc(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const value = cpu.readOperand(operands[0]);\n  const result = value + 1;\n  const maskedResult =\n    operands[0].type === OperandType.Register16 && !operands[0].isAddress\n      ? result & 0xffff\n      : result & 0xff;\n\n  cpu.writeToOperand(operands[0], maskedResult);\n\n  // 16 bit operations don't affect flags\n  if (operands[0].type === OperandType.Register16 && !operands[0].isAddress) {\n    return FLAGS_NO_CHANGE;\n  }\n\n  return {\n    Z: maskedResult === 0,\n    N: false,\n    H: checkAddHalfCarry(value, 1),\n    C: null,\n  };\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Jump to the address specified\n * @param cpu Cpu to operate on\n * @param operands [0] = jump address\n */\nexport default function jp(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const jumpAddress = cpu.readOperand(operands[0]);\n  cpu.PC = jumpAddress;\n\n  return FLAGS_NO_CHANGE;\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Read from one location and store it in another\n * @param cpu Cpu to operate on\n * @param operands [0] = destination, [1] = source\n */\nexport default function ld(cpu: Cpu, operands: Operand[]): ResultFlags {\n  cpu.writeToOperand(operands[0], cpu.readOperand(operands[1]));\n\n  return FLAGS_NO_CHANGE;\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport { ResultFlags } from '../types';\n\n/**\n * No op function\n */\nexport default function nop(): ResultFlags {\n  return FLAGS_NO_CHANGE;\n}\n","import Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * OR two values together\n * @param cpu Cpu to operate on\n * @param operands [0] = first value to OR [1] = second value to OR\n */\nexport default function or(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const value1 = cpu.readOperand(operands[0]);\n  const value2 = cpu.readOperand(operands[1]);\n  const result = value1 | value2;\n\n  cpu.writeToOperand(operands[0], result);\n\n  return {\n    Z: result === 0,\n    N: false,\n    H: false,\n    C: false,\n  };\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Pop a value from the stack and put it in the operand\n * @param cpu Cpu to operate on\n * @param operands [0] = destination of popped value\n */\nexport default function pop(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const value = cpu.read16(cpu.SP);\n  cpu.SP += 2;\n\n  cpu.writeToOperand(operands[0], value);\n  return FLAGS_NO_CHANGE;\n}\n","import { REG_PC } from '../constants';\nimport Cpu from '../Cpu';\nimport { OperandType } from '../types';\nimport pop from './pop';\n/**\n * Return from a subroutine\n * @param cpu Cpu to operate on\n */\nexport default function ret(cpu: Cpu) {\n  return pop(cpu, [{ type: OperandType.Register16, target: REG_PC }]);\n}\n","import Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Rotate a value left through the carry (7 => Carry => 0)\n * @param cpu Cpu to operate on\n * @param operands [0] = value to rotate left\n */\nexport default function rl(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const value = cpu.readOperand(operands[0]);\n  let result = value << 1;\n\n  // Shift the carry flag in\n  if (cpu.flagC) {\n    result = result | 0x01;\n  }\n\n  const maskedResult = result & 0xff;\n\n  cpu.writeToOperand(operands[0], maskedResult);\n\n  return {\n    Z: maskedResult === 0,\n    N: false,\n    H: false,\n    C: (result & 0x100) === 0x100,\n  };\n}\n","import Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Rotate a value left (circular - 7 bit rotated back into 0 bit, and stored in carry)\n * @param cpu Cpu to operate on\n * @param operands [0] = value to rotate\n */\nexport default function rlc(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const value = cpu.readOperand(operands[0]);\n  let result = value << 1;\n\n  // Move carry to carry flag (existing carry discarded)\n  const flagC = (result & 0x100) === 0x100;\n\n  // Rotate 7th bit in same as carry\n  if (flagC) {\n    result = result | 0x01;\n  }\n\n  const maskedResult = result & 0xff;\n\n  cpu.writeToOperand(operands[0], maskedResult);\n\n  return {\n    Z: maskedResult === 0,\n    N: false,\n    H: false,\n    C: flagC,\n  };\n}\n","import Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Rotate a value right through the carry (0 => Carry => 7)\n * @param cpu Cpu to operate on\n * @param operands [0] = value to rotate right\n */\nexport default function rr(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const value = cpu.readOperand(operands[0]);\n  let result = value >> 1;\n\n  // Shift the carry flag in\n  if (cpu.flagC) {\n    result = result | 0x80;\n  }\n\n  const maskedResult = result & 0xff;\n\n  cpu.writeToOperand(operands[0], maskedResult);\n\n  return {\n    Z: maskedResult === 0,\n    N: false,\n    H: false,\n    C: (value & 0x01) === 0x01,\n  };\n}\n","import Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Rotate a value right (circular - 0 bit rotated back into 7 bit, and stored in carry)\n * @param cpu Cpu to operate on\n * @param operands [0] = value to rotate\n */\nexport default function rrc(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const value = cpu.readOperand(operands[0]);\n  let result = value >> 1;\n\n  // Move carry to carry flag (existing carry discarded)\n  const flagC = (value & 0x01) === 0x01;\n\n  // Rotate 0th bit in same as carry\n  if (flagC) {\n    result = result | 0x80;\n  }\n\n  const maskedResult = result & 0xff;\n\n  cpu.writeToOperand(operands[0], maskedResult);\n\n  return {\n    Z: maskedResult === 0,\n    N: false,\n    H: false,\n    C: flagC,\n  };\n}\n","import Cpu from '../Cpu';\n\n/**\n * Restart at a given address\n * @param cpu Cpu to operate on\n * @param address The address to restart at\n */\nexport default function rst(cpu: Cpu, address: number): void {\n  cpu.SP -= 2;\n  cpu.write16(cpu.SP, cpu.PC);\n  cpu.PC = address;\n}\n","import Cpu from '../Cpu';\nimport { checkSubtractHalfCarry } from '../helpers/checkSubtractHalfCarry';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Subtract subtract one value from another and also subtract the carry flag\n * @param cpu Cpu to operate on\n * @param operands [0] = to subtract from/destination [1] = value to subtract\n */\nexport default function sbc(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const value1 = cpu.readOperand(operands[0]);\n  const value2 = cpu.readOperand(operands[1]);\n  const result = value1 - value2 - (cpu.flagC ? 1 : 0);\n  const maskedResult = result & 0xff;\n\n  cpu.writeToOperand(operands[0], maskedResult);\n\n  return {\n    Z: maskedResult === 0,\n    N: true,\n    H: checkSubtractHalfCarry(value1, value2, cpu.flagC),\n    C: result < 0,\n  };\n}\n","import Cpu from '../Cpu';\nimport { checkSubtractHalfCarry } from '../helpers/checkSubtractHalfCarry';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Subtract subtract one value from another\n * @param cpu Cpu to operate on\n * @param operands [0] = to subtract from/destination [1] = value to subtract\n */\nexport default function sub(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const value1 = cpu.readOperand(operands[0]);\n  const value2 = cpu.readOperand(operands[1]);\n  const result = value1 - value2;\n  const maskedResult = result & 0xff;\n\n  cpu.writeToOperand(operands[0], maskedResult);\n\n  return {\n    Z: maskedResult === 0,\n    N: true,\n    H: checkSubtractHalfCarry(value1, value2),\n    C: result < 0,\n  };\n}\n","import Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * XOR two values together\n * @param cpu Cpu to operate on\n * @param operands [0] = first value to XOR [1] = second value to XOR\n */\nexport default function xor(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const value1 = cpu.readOperand(operands[0]);\n  const value2 = cpu.readOperand(operands[1]);\n  const result = value1 ^ value2;\n\n  cpu.writeToOperand(operands[0], result);\n\n  return {\n    Z: result === 0,\n    N: false,\n    H: false,\n    C: false,\n  };\n}\n","import {\n  REG_A,\n  REG_AF,\n  REG_B,\n  REG_BC,\n  REG_C,\n  REG_D,\n  REG_DE,\n  REG_E,\n  REG_H,\n  REG_HL,\n  REG_L,\n  REG_SP,\n} from '../constants';\nimport { adc } from '../operations/adc';\nimport add from '../operations/add';\nimport addSp from '../operations/addSp';\nimport and from '../operations/and';\nimport call from '../operations/call';\nimport callC from '../operations/callC';\nimport callNc from '../operations/callNc';\nimport callNz from '../operations/callNz';\nimport callZ from '../operations/callZ';\nimport ccf from '../operations/ccf';\nimport cp from '../operations/cp';\nimport cpl from '../operations/cpl';\nimport daa from '../operations/daa';\nimport dec from '../operations/dec';\nimport di from '../operations/di';\nimport ei from '../operations/ei';\nimport inc from '../operations/inc';\nimport jp from '../operations/jp';\nimport jpC from '../operations/jpc';\nimport jpNc from '../operations/jpnc';\nimport jpNz from '../operations/jpnz';\nimport jpZ from '../operations/jpz';\nimport jr from '../operations/jr';\nimport jrC from '../operations/jrc';\nimport jrNc from '../operations/jrnc';\nimport jrNz from '../operations/jrnz';\nimport jrZ from '../operations/jrz';\nimport ld from '../operations/ld';\nimport ldHlSpE8 from '../operations/ldHlSpE8';\nimport nop from '../operations/nop';\nimport or from '../operations/or';\nimport pop from '../operations/pop';\nimport push from '../operations/push';\nimport ret from '../operations/ret';\nimport retC from '../operations/retc';\nimport reti from '../operations/reti';\nimport retNc from '../operations/retnc';\nimport retNz from '../operations/retnz';\nimport retZ from '../operations/retz';\nimport rla from '../operations/rla';\nimport rlca from '../operations/rlca';\nimport rra from '../operations/rra';\nimport rrca from '../operations/rrca';\nimport rst00 from '../operations/rst00';\nimport rst08 from '../operations/rst08';\nimport rst10 from '../operations/rst10';\nimport rst18 from '../operations/rst18';\nimport rst20 from '../operations/rst20';\nimport rst28 from '../operations/rst28';\nimport rst30 from '../operations/rst30';\nimport rst38 from '../operations/rst38';\nimport sbc from '../operations/sbc';\nimport scf from '../operations/scf';\nimport sub from '../operations/sub';\nimport xor from '../operations/xor';\nimport { OpCode, OperandModifier, OperandType } from '../types';\n\nconst main: Record<number, OpCode> = {\n  0x00: {\n    action: nop,\n    operands: [],\n    mnemonic: 'NOP',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x01: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_BC,\n      },\n      {\n        type: OperandType.Immediate16,\n      },\n    ],\n    mnemonic: 'LD BC, d16',\n    bytes: 3,\n    cycles: 12,\n  },\n  0x02: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_BC,\n        isAddress: true,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'LD (BC), A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x03: {\n    action: inc,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_BC,\n      },\n    ],\n    mnemonic: 'INC BC',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x04: {\n    action: inc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'INC B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x05: {\n    action: dec,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'DEC B',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x06: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n      {\n        type: OperandType.Immediate8,\n      },\n    ],\n    mnemonic: 'LD B, d8',\n    bytes: 2,\n    cycles: 8,\n  },\n  0x07: {\n    action: rlca,\n    mnemonic: 'RLCA',\n    operands: [],\n    bytes: 1,\n    cycles: 4,\n  },\n  0x08: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Immediate16,\n        isAddress: true,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_SP,\n      },\n    ],\n    mnemonic: 'LD (a16), SP',\n    bytes: 3,\n    cycles: 20,\n  },\n  0x09: {\n    action: add,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_BC,\n      },\n    ],\n    mnemonic: 'ADD HL, BC',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x0a: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_BC,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'LD A, (BC)',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x0b: {\n    action: dec,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_BC,\n      },\n    ],\n    mnemonic: 'DEC BC',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x0c: {\n    action: inc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'INC C',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x0d: {\n    action: dec,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'DEC C',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x0e: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n      {\n        type: OperandType.Immediate8,\n      },\n    ],\n    mnemonic: 'LD C, d8',\n    bytes: 2,\n    cycles: 8,\n  },\n  0x0f: {\n    action: rrca,\n    operands: [],\n    mnemonic: 'RRCA',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x10: {\n    action: nop, // TODO: Handle low power mode\n    operands: [],\n    mnemonic: 'STOP d8',\n    bytes: 2,\n    cycles: 4,\n  },\n  0x11: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_DE,\n      },\n      {\n        type: OperandType.Immediate16,\n      },\n    ],\n    mnemonic: 'LD DE, d16',\n    bytes: 3,\n    cycles: 12,\n  },\n  0x12: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_DE,\n        isAddress: true,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'LD (DE), A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x13: {\n    action: inc,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_DE,\n      },\n    ],\n    mnemonic: 'INC DE',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x14: {\n    action: inc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'INC D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x15: {\n    action: dec,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'DEC D',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x16: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n      {\n        type: OperandType.Immediate8,\n      },\n    ],\n    mnemonic: 'LD D, d8',\n    bytes: 2,\n    cycles: 8,\n  },\n  0x17: {\n    action: rla,\n    operands: [],\n    mnemonic: 'RLA',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x18: {\n    action: jr,\n    operands: [\n      {\n        type: OperandType.Immediate8Signed,\n      },\n    ],\n    mnemonic: 'JR n',\n    bytes: 2,\n    cycles: 12,\n  },\n  0x19: {\n    action: add,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_DE,\n      },\n    ],\n    mnemonic: 'ADD HL, DE',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x1a: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_DE,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'LD A, (DE)',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x1b: {\n    action: dec,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_DE,\n      },\n    ],\n    mnemonic: 'DEC DE',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x1c: {\n    action: inc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'INC E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x1d: {\n    action: dec,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'DEC E',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x1e: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n      {\n        type: OperandType.Immediate8,\n      },\n    ],\n    mnemonic: 'LD E, d8',\n    bytes: 2,\n    cycles: 8,\n  },\n  0x1f: {\n    action: rra,\n    operands: [],\n    mnemonic: 'RRA',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x20: {\n    action: jrNz,\n    operands: [\n      {\n        type: OperandType.Immediate8Signed,\n      },\n    ],\n    mnemonic: 'JR NZ, R8',\n    bytes: 2,\n    cycles: 8,\n  },\n  0x21: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n      },\n      {\n        type: OperandType.Immediate16,\n      },\n    ],\n    mnemonic: 'LD HL, d16',\n    bytes: 3,\n    cycles: 12,\n  },\n  0x22: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n        modifier: OperandModifier.Increment,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'LD (HL)+, A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x23: {\n    action: inc,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n      },\n    ],\n    mnemonic: 'INC HL',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x24: {\n    action: inc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'INC H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x25: {\n    action: dec,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'DEC H',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x26: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n      {\n        type: OperandType.Immediate8,\n      },\n    ],\n    mnemonic: 'LD H, d8',\n    bytes: 2,\n    cycles: 8,\n  },\n  0x27: {\n    action: daa,\n    operands: [],\n    mnemonic: 'DAA',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x28: {\n    action: jrZ,\n    operands: [\n      {\n        type: OperandType.Immediate8Signed,\n      },\n    ],\n    mnemonic: 'JR Z, R8',\n    bytes: 2,\n    cycles: 8,\n  },\n  0x29: {\n    action: add,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n      },\n    ],\n    mnemonic: 'ADD HL, HL',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x2a: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n        modifier: OperandModifier.Increment,\n      },\n    ],\n    mnemonic: 'LD A, (HL+)',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x2b: {\n    action: dec,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n      },\n    ],\n    mnemonic: 'DEC HL',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x2c: {\n    action: inc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'INC L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x2d: {\n    action: dec,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'DEC L',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x2e: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n      {\n        type: OperandType.Immediate8,\n      },\n    ],\n    mnemonic: 'LD L, d8',\n    bytes: 2,\n    cycles: 8,\n  },\n  0x2f: {\n    action: cpl,\n    operands: [],\n    mnemonic: 'CPL',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x30: {\n    action: jrNc,\n    operands: [\n      {\n        type: OperandType.Immediate8Signed,\n      },\n    ],\n    mnemonic: 'JR NC, R8',\n    bytes: 2,\n    cycles: 8,\n  },\n  0x31: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_SP,\n      },\n      {\n        type: OperandType.Immediate16,\n      },\n    ],\n    mnemonic: 'LD SP, d16',\n    bytes: 3,\n    cycles: 12,\n  },\n  0x32: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n        modifier: OperandModifier.Decrement,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'LD (HLD), A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x33: {\n    action: inc,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_SP,\n      },\n    ],\n    mnemonic: 'INC SP',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x34: {\n    action: inc,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'INC (HL)',\n    bytes: 1,\n    cycles: 12,\n  },\n  0x35: {\n    action: dec,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'DEC (HL)',\n    bytes: 1,\n    cycles: 12,\n  },\n  0x36: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n      {\n        type: OperandType.Immediate8,\n      },\n    ],\n    mnemonic: 'LD (HL), d8',\n    bytes: 2,\n    cycles: 12,\n  },\n  0x37: {\n    action: scf,\n    operands: [],\n    mnemonic: 'SCF',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x38: {\n    action: jrC,\n    operands: [\n      {\n        type: OperandType.Immediate8Signed,\n      },\n    ],\n    mnemonic: 'JR C, R8',\n    bytes: 2,\n    cycles: 8,\n  },\n  0x39: {\n    action: add,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_SP,\n      },\n    ],\n    mnemonic: 'ADD HL, SP',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x3a: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n        modifier: OperandModifier.Decrement,\n      },\n    ],\n    mnemonic: 'LD A, (HL-)',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x3b: {\n    action: dec,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_SP,\n      },\n    ],\n    mnemonic: 'DEC SP',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x3c: {\n    action: inc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'INC A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x3d: {\n    action: dec,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'DEC A',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x3e: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Immediate8,\n      },\n    ],\n    mnemonic: 'LD A, d8',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x3f: {\n    action: ccf,\n    operands: [],\n    mnemonic: 'CCF',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x40: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'LD B, B',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x41: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'LD B, C',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x42: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'LD B, D',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x43: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'LD B, E',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x44: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'LD B, H',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x45: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'LD B, L',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x46: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'LD B, (HL)',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x47: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'LD B, A',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x48: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'LD C, B',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x49: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'LD C, C',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x4a: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'LD C, D',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x4b: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'LD C, E',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x4c: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'LD C, H',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x4d: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'LD C, L',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x4e: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'LD C, (HL)',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x4f: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'LD C, A',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x50: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'LD D, B',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x51: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'LD D, C',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x52: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'LD D, D',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x53: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'LD D, E',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x54: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'LD D, H',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x55: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'LD D, L',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x56: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'LD D, (HL)',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x57: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'LD D, A',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x58: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'LD E, B',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x59: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'LD E, C',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x5a: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'LD E, D',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x5b: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'LD E, E',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x5c: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'LD E, H',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x5d: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'LD E, L',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x5e: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'LD E, (HL)',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x5f: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'LD E, A',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x60: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'LD H, B',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x61: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'LD H, C',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x62: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'LD H, D',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x63: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'LD H, E',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x64: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'LD H, H',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x65: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'LD H, L',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x66: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'LD H, (HL)',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x67: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'LD H, A',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x68: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'LD L, B',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x69: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'LD L, C',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x6a: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'LD L, D',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x6b: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'LD L, E',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x6c: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'LD L, H',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x6d: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'LD L, L',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x6e: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'LD L, (HL)',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x6f: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'LD L, A',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x70: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'LD (HL), B',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x71: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'LD (HL), C',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x72: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'LD (HL), D',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x73: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'LD (HL), E',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x74: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'LD (HL), H',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x75: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'LD (HL), L',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x76: {\n    action: nop, // TODO: Handle low power mode\n    operands: [],\n    mnemonic: 'HALT',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x77: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'LD (HL), A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x78: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'LD A, B',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x79: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'LD A, C',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x7a: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'LD A, D',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x7b: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'LD A, E',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x7c: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'LD A, H',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x7d: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'LD A, L',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x7e: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'LD A, (HL)',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x7f: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'LD A, A',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x80: {\n    action: add,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'ADD A, B',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x81: {\n    action: add,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'ADD A, C',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x82: {\n    action: add,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'ADD A, D',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x83: {\n    action: add,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'ADD A, E',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x84: {\n    action: add,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'ADD A, H',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x85: {\n    action: add,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'ADD A, L',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x86: {\n    action: add,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'ADD A, (HL)',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x87: {\n    action: add,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'ADD A, A',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x88: {\n    action: adc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'ADC A, B',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x89: {\n    action: adc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'ADC A, C',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x8a: {\n    action: adc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'ADC A, D',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x8b: {\n    action: adc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'ADC A, E',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x8c: {\n    action: adc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'ADC A, H',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x8d: {\n    action: adc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'ADC A, L',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x8e: {\n    action: adc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'ADC A, (HL)',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x8f: {\n    action: adc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'ADC A, A',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x90: {\n    action: sub,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'SUB B',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x91: {\n    action: sub,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'SUB C',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x92: {\n    action: sub,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'SUB D',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x93: {\n    action: sub,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'SUB E',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x94: {\n    action: sub,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'SUB H',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x95: {\n    action: sub,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'SUB L',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x96: {\n    action: sub,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'SUB (HL)',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x97: {\n    action: sub,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'SUB A',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x98: {\n    action: sbc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'SBC A, B',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x99: {\n    action: sbc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'SBC A, C',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x9a: {\n    action: sbc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'SBC A, D',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x9b: {\n    action: sbc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'SBC A, E',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x9c: {\n    action: sbc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'SBC A, H',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x9d: {\n    action: sbc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'SBC A, L',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x9e: {\n    action: sbc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'SBC A, (HL)',\n    bytes: 1,\n    cycles: 4,\n  },\n  0x9f: {\n    action: sbc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'SBC A, A',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xa0: {\n    action: and,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'AND B',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xa1: {\n    action: and,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'AND C',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xa2: {\n    action: and,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'AND D',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xa3: {\n    action: and,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'AND E',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xa4: {\n    action: and,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'AND H',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xa5: {\n    action: and,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'AND L',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xa6: {\n    action: and,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'AND (HL)',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xa7: {\n    action: and,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'AND A',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xa8: {\n    action: xor,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'XOR B',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xa9: {\n    action: xor,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'XOR C',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xaa: {\n    action: xor,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'XOR D',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xab: {\n    action: xor,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'XOR E',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xac: {\n    action: xor,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'XOR H',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xad: {\n    action: xor,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'XOR L',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xae: {\n    action: xor,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'XOR (HL)',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xaf: {\n    action: xor,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'XOR A',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xb0: {\n    action: or,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'OR B',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xb1: {\n    action: or,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'OR C',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xb2: {\n    action: or,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'OR D',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xb3: {\n    action: or,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'OR E',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xb4: {\n    action: or,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'OR H',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xb5: {\n    action: or,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'OR L',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xb6: {\n    action: or,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'OR (HL)',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xb7: {\n    action: or,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'OR A',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xb8: {\n    action: cp,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'CP B',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xb9: {\n    action: cp,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'CP C',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xba: {\n    action: cp,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'CP D',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xbb: {\n    action: cp,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'CP E',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xbc: {\n    action: cp,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'CP H',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xbd: {\n    action: cp,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'CP L',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xbe: {\n    action: cp,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'CP (HL)',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xbf: {\n    action: cp,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'CP A',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xc0: {\n    action: retNz,\n    operands: [],\n    mnemonic: 'RET NZ',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xc1: {\n    action: pop,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_BC,\n      },\n    ],\n    mnemonic: 'POP BC',\n    bytes: 1,\n    cycles: 12,\n  },\n  0xc2: {\n    action: jpNz,\n    operands: [\n      {\n        type: OperandType.Immediate16,\n      },\n    ],\n    mnemonic: 'JP NZ a16',\n    bytes: 1,\n    cycles: 12,\n  },\n  0xc3: {\n    action: jp,\n    operands: [\n      {\n        type: OperandType.Immediate16,\n      },\n    ],\n    mnemonic: 'JP a16',\n    bytes: 3,\n    cycles: 12,\n  },\n  0xc4: {\n    action: callNz,\n    operands: [\n      {\n        type: OperandType.Immediate16,\n      },\n    ],\n    mnemonic: 'CALL NZ, a16',\n    bytes: 3,\n    cycles: 12,\n  },\n  0xc5: {\n    action: push,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_BC,\n      },\n    ],\n    mnemonic: 'PUSH BC',\n    bytes: 1,\n    cycles: 16,\n  },\n  0xc6: {\n    action: add,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Immediate8,\n      },\n    ],\n    mnemonic: 'ADD A, d8',\n    bytes: 2,\n    cycles: 8,\n  },\n  0xc7: {\n    action: rst00,\n    operands: [],\n    mnemonic: 'RST 00',\n    bytes: 1,\n    cycles: 32,\n  },\n  0xc8: {\n    action: retZ,\n    operands: [],\n    mnemonic: 'RET Z',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xc9: {\n    action: ret,\n    operands: [],\n    mnemonic: 'RET',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xca: {\n    action: jpZ,\n    operands: [\n      {\n        type: OperandType.Immediate16,\n      },\n    ],\n    mnemonic: 'JP Z a16',\n    bytes: 1,\n    cycles: 12,\n  },\n  0xcc: {\n    action: callZ,\n    operands: [\n      {\n        type: OperandType.Immediate16,\n      },\n    ],\n    mnemonic: 'CALL Z, a16',\n    bytes: 3,\n    cycles: 12,\n  },\n  0xcd: {\n    action: call,\n    operands: [\n      {\n        type: OperandType.Immediate16,\n      },\n    ],\n    mnemonic: 'CALL a16',\n    bytes: 3,\n    cycles: 24,\n  },\n  0xce: {\n    action: adc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Immediate8,\n      },\n    ],\n    mnemonic: 'ADC A, d8',\n    bytes: 2,\n    cycles: 8,\n  },\n  0xcf: {\n    action: rst08,\n    operands: [],\n    mnemonic: 'RST 08',\n    bytes: 1,\n    cycles: 32,\n  },\n  0xd0: {\n    action: retNc,\n    operands: [],\n    mnemonic: 'RET NC',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xd1: {\n    action: pop,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_DE,\n      },\n    ],\n    mnemonic: 'POP DE',\n    bytes: 1,\n    cycles: 12,\n  },\n  0xd2: {\n    action: jpNc,\n    operands: [\n      {\n        type: OperandType.Immediate16,\n      },\n    ],\n    mnemonic: 'JP NC a16',\n    bytes: 1,\n    cycles: 12,\n  },\n  0xd4: {\n    action: callNc,\n    operands: [\n      {\n        type: OperandType.Immediate16,\n      },\n    ],\n    mnemonic: 'CALL NC, a16',\n    bytes: 3,\n    cycles: 12,\n  },\n  0xd5: {\n    action: push,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_DE,\n      },\n    ],\n    mnemonic: 'PUSH DE',\n    bytes: 1,\n    cycles: 16,\n  },\n  0xd6: {\n    action: sub,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Immediate8,\n      },\n    ],\n    mnemonic: 'SUB d8',\n    bytes: 2,\n    cycles: 8,\n  },\n  0xd7: {\n    action: rst10,\n    operands: [],\n    mnemonic: 'RST 10',\n    bytes: 1,\n    cycles: 32,\n  },\n  0xd8: {\n    action: retC,\n    operands: [],\n    mnemonic: 'RET C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xd9: {\n    action: reti,\n    operands: [],\n    mnemonic: 'RETI',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xda: {\n    action: jpC,\n    operands: [\n      {\n        type: OperandType.Immediate16,\n      },\n    ],\n    mnemonic: 'JP C a16',\n    bytes: 1,\n    cycles: 12,\n  },\n  0xdc: {\n    action: callC,\n    operands: [\n      {\n        type: OperandType.Immediate16,\n      },\n    ],\n    mnemonic: 'CALL C, a16',\n    bytes: 3,\n    cycles: 12,\n  },\n  0xde: {\n    action: sbc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'SBC A, B',\n    bytes: 2,\n    cycles: 8,\n  },\n  0xdf: {\n    action: rst18,\n    operands: [],\n    mnemonic: 'RST 18',\n    bytes: 1,\n    cycles: 32,\n  },\n  0xe0: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Immediate8,\n        isAddress: true,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'LDH a8, A',\n    bytes: 2,\n    cycles: 12,\n  },\n  0xe1: {\n    action: pop,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n      },\n    ],\n    mnemonic: 'POP HL',\n    bytes: 1,\n    cycles: 12,\n  },\n  0xe2: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n        isAddress: true,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'LD (C), A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xe5: {\n    action: push,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n      },\n    ],\n    mnemonic: 'PUSH HL',\n    bytes: 1,\n    cycles: 16,\n  },\n  0xe6: {\n    action: and,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Immediate8,\n      },\n    ],\n    mnemonic: 'AND d8',\n    bytes: 2,\n    cycles: 8,\n  },\n  0xe7: {\n    action: rst20,\n    operands: [],\n    mnemonic: 'RST 20',\n    bytes: 1,\n    cycles: 32,\n  },\n  0xe8: {\n    action: addSp,\n    operands: [\n      {\n        type: OperandType.Immediate8Signed,\n      },\n    ],\n    mnemonic: 'ADD SP, r8',\n    bytes: 2,\n    cycles: 16,\n  },\n  0xe9: {\n    action: jp,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n      },\n    ],\n    mnemonic: 'JP HL',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xea: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Immediate16,\n        isAddress: true,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'LDH a16, A',\n    bytes: 3,\n    cycles: 16,\n  },\n  0xee: {\n    action: xor,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Immediate8,\n      },\n    ],\n    mnemonic: 'XOR d8',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xef: {\n    action: rst28,\n    operands: [],\n    mnemonic: 'RST 28',\n    bytes: 1,\n    cycles: 32,\n  },\n  0xf0: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Immediate8,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'LDH A, a8',\n    bytes: 2,\n    cycles: 12,\n  },\n  0xf1: {\n    action: pop,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_AF,\n      },\n    ],\n    mnemonic: 'POP AF',\n    bytes: 1,\n    cycles: 12,\n  },\n  0xf2: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'LD A, (C)',\n    bytes: 1,\n    cycles: 12,\n  },\n  0xf3: {\n    action: di,\n    operands: [],\n    mnemonic: 'DI',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xf5: {\n    action: push,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_AF,\n      },\n    ],\n    mnemonic: 'PUSH AF',\n    bytes: 1,\n    cycles: 16,\n  },\n  0xf6: {\n    action: or,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Immediate8,\n      },\n    ],\n    mnemonic: 'OR d8',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xf7: {\n    action: rst30,\n    operands: [],\n    mnemonic: 'RST 30',\n    bytes: 1,\n    cycles: 32,\n  },\n  0xf8: {\n    action: ldHlSpE8,\n    operands: [],\n    mnemonic: 'LD HL, SP + r8',\n    bytes: 2,\n    cycles: 12,\n  },\n  0xf9: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_SP,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n      },\n    ],\n    mnemonic: 'LD SP, HL',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xfa: {\n    action: ld,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Immediate16,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'LD A, a16',\n    bytes: 1,\n    cycles: 16,\n  },\n  0xfb: {\n    action: ei,\n    operands: [],\n    mnemonic: 'EI',\n    bytes: 1,\n    cycles: 4,\n  },\n  0xfe: {\n    action: cp,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n      {\n        type: OperandType.Immediate8,\n      },\n    ],\n    mnemonic: 'CP d8',\n    bytes: 2,\n    cycles: 8,\n  },\n  0xff: {\n    action: rst38,\n    operands: [],\n    mnemonic: 'RST 38',\n    bytes: 1,\n    cycles: 32,\n  },\n};\n\nexport default main;\n","import { REG_A } from '../constants';\nimport Cpu from '../Cpu';\nimport { OperandType, ResultFlags } from '../types';\nimport rlc from './rlc';\n\n/**\n * Rotate a value left (circular - 7 bit rotated back into 0 bit, and stored in carry)\n * Special op specific to A that only returns carry flag\n * @param cpu Cpu to operate on\n */\nexport default function rlca(cpu: Cpu): ResultFlags {\n  const resultFlags = rlc(cpu, [\n    { type: OperandType.Register8, target: REG_A },\n  ]);\n\n  return {\n    Z: false,\n    N: false,\n    H: false,\n    C: resultFlags.C,\n  };\n}\n","import { REG_A } from '../constants';\nimport Cpu from '../Cpu';\nimport { OperandType, ResultFlags } from '../types';\nimport rrc from './rrc';\n\n/**\n * Rotate a value right (circular - 0 bit rotated back into 7 bit, and stored in carry)\n * Special op specific to A, only keeps carry flag\n * @param cpu Cpu to operate on\n */\nexport default function rrca(cpu: Cpu): ResultFlags {\n  const resultFlags = rrc(cpu, [\n    { type: OperandType.Register8, target: REG_A },\n  ]);\n\n  return {\n    Z: false,\n    N: false,\n    H: false,\n    C: resultFlags.C,\n  };\n}\n","import { REG_A } from '../constants';\nimport Cpu from '../Cpu';\nimport { OperandType, ResultFlags } from '../types';\nimport rl from './rl';\n\n/**\n * Rotate a value left through the carry (7 => Carry => 0)\n * Special op specific to A that only returns carry flag\n * @param cpu Cpu to operate on\n * @param operands [0] = value to rotate left\n */\nexport default function rla(cpu: Cpu): ResultFlags {\n  const resultFlags = rl(cpu, [{ type: OperandType.Register8, target: REG_A }]);\n\n  return {\n    Z: false,\n    N: false,\n    H: false,\n    C: resultFlags.C,\n  };\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Jump to the address relative to the current address by n\n * @param cpu Cpu to operate on\n * @param operands [0] = n (jump offset value)\n */\nexport default function jr(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const jumpOffset = cpu.readOperand(operands[0]);\n  cpu.PC += jumpOffset;\n\n  return FLAGS_NO_CHANGE;\n}\n","import { REG_A } from '../constants';\nimport Cpu from '../Cpu';\nimport { OperandType, ResultFlags } from '../types';\nimport rr from './rr';\n\n/**\n * Rotate a value right through the carry (0 => Carry => 7)\n * Special op specific to A, only keeps carry flag\n * @param cpu Cpu to operate on\n */\nexport default function rra(cpu: Cpu): ResultFlags {\n  const resultFlags = rr(cpu, [{ type: OperandType.Register8, target: REG_A }]);\n\n  return {\n    Z: false,\n    N: false,\n    H: false,\n    C: resultFlags.C,\n  };\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Jump to the address relative to the current address by n if Zero flag is NOT set\n * @param cpu Cpu to operate on\n * @param operands [0] = n (jump offset value)\n */\nexport default function jrNz(cpu: Cpu, operands: Operand[]): ResultFlags {\n  // Always read to advance the PC\n  const jumpOffset = cpu.readOperand(operands[0]);\n\n  if (!cpu.flagZ) {\n    cpu.PC += jumpOffset;\n  }\n\n  return FLAGS_NO_CHANGE;\n}\n","import Cpu from '../Cpu';\nimport { ResultFlags } from '../types';\n\nexport default function daa(cpu: Cpu): ResultFlags {\n  let result = cpu.A;\n  let flagC: boolean | null = null;\n\n  // Addition - flagN = if previous op was subtraction\n  if (!cpu.flagN) {\n    if (cpu.flagH || (cpu.A & 0x0f) > 0x09) {\n      result += 0x06;\n    }\n\n    if (cpu.flagC || cpu.A > 0x99) {\n      result += 0x60;\n      flagC = true;\n    }\n  } else if (cpu.flagH) {\n    // Subtraction\n    if (cpu.flagH) {\n      result -= 0x06;\n    }\n\n    if (cpu.flagC) {\n      result -= 0x60;\n    }\n  }\n\n  const maskedResult = result & 0xff;\n  cpu.A = maskedResult;\n\n  return {\n    Z: maskedResult === 0,\n    N: null,\n    H: false,\n    C: flagC,\n  };\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Jump to the address relative to the current address by n if Zero flag is set\n * @param cpu Cpu to operate on\n * @param operands [0] = n (jump offset value)\n */\nexport default function jrZ(cpu: Cpu, operands: Operand[]): ResultFlags {\n  // Always read to advance the PC\n  const jumpOffset = cpu.readOperand(operands[0]);\n\n  if (cpu.flagZ) {\n    cpu.PC += jumpOffset;\n  }\n\n  return FLAGS_NO_CHANGE;\n}\n","import Cpu from '../Cpu';\nimport { ResultFlags } from '../types';\n\n/**\n * Compliment A\n * @param cpu Cpu to operate on\n */\nexport default function cpl(cpu: Cpu): ResultFlags {\n  cpu.A = cpu.A ^ 0xff;\n\n  return {\n    Z: null,\n    N: true,\n    H: true,\n    C: null,\n  };\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Jump to the address relative to the current address by n if Carry flag is NOT set\n * @param cpu Cpu to operate on\n * @param operands [0] = n (jump offset value)\n */\nexport default function jrNc(cpu: Cpu, operands: Operand[]): ResultFlags {\n  // Always read to advance the PC\n  const jumpOffset = cpu.readOperand(operands[0]);\n\n  if (!cpu.flagC) {\n    cpu.PC += jumpOffset;\n  }\n\n  return FLAGS_NO_CHANGE;\n}\n","import { ResultFlags } from '../types';\n\n/**\n * Set the carry flag\n */\nexport default function scf(): ResultFlags {\n  return {\n    Z: null,\n    N: false,\n    H: false,\n    C: true,\n  };\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Jump to the address relative to the current address by n if Carry flag is set\n * @param cpu Cpu to operate on\n * @param operands [0] = n (jump offset value)\n */\nexport default function jrC(cpu: Cpu, operands: Operand[]): ResultFlags {\n  // Always read to advance the PC\n  const jumpOffset = cpu.readOperand(operands[0]);\n\n  if (cpu.flagC) {\n    cpu.PC += jumpOffset;\n  }\n\n  return FLAGS_NO_CHANGE;\n}\n","import Cpu from '../Cpu';\nimport { ResultFlags } from '../types';\n\n/**\n * Compliment the carry flag (invert)\n * @param cpu Cpu to operate on\n */\nexport default function ccf(cpu: Cpu): ResultFlags {\n  return {\n    Z: null,\n    N: false,\n    H: false,\n    C: !cpu.flagC,\n  };\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport { ResultFlags } from '../types';\nimport ret from './ret';\n\n/**\n * Return from subroutine if zero flag is not set\n * @param cpu Cpu to operate on\n */\nexport default function retNz(cpu: Cpu): ResultFlags {\n  if (!cpu.flagZ) {\n    return ret(cpu);\n  }\n\n  return FLAGS_NO_CHANGE;\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Jump to the address specified if the zero flag is not set\n * @param cpu Cpu to operate on\n * @param operands [0] = jump address\n */\nexport default function jpNz(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const jumpAddress = cpu.readOperand(operands[0]);\n\n  if (!cpu.flagZ) {\n    cpu.PC = jumpAddress;\n  }\n\n  return FLAGS_NO_CHANGE;\n}\n","import { FLAGS_NO_CHANGE, REG_PC } from '../constants';\nimport Cpu from '../Cpu';\nimport { Operand, OperandType, ResultFlags } from '../types';\nimport push from './push';\n\n/**\n * Call a given address (push next instruction onto stack for RET) if Zero flag is NOT set\n * @param cpu Cpu to operate on\n * @param operands [0] = call address\n */\nexport default function callNz(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const jumpAddress = cpu.readOperand(operands[0]);\n  if (!cpu.flagZ) {\n    push(cpu, [{ type: OperandType.Register16, target: REG_PC }]);\n    cpu.PC = jumpAddress;\n  }\n\n  return FLAGS_NO_CHANGE;\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport rst from './rst';\nimport { ResultFlags } from '../types';\n\n/**\n * Restart at address 0x00\n * @param cpu Cpu to operate on\n */\nexport default function rst00(cpu: Cpu): ResultFlags {\n  rst(cpu, 0x00);\n  return FLAGS_NO_CHANGE;\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport { ResultFlags } from '../types';\nimport ret from './ret';\n\n/**\n * Return from subroutine if zero flag is set\n * @param cpu Cpu to operate on\n */\nexport default function retZ(cpu: Cpu): ResultFlags {\n  if (cpu.flagZ) {\n    return ret(cpu);\n  }\n\n  return FLAGS_NO_CHANGE;\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Jump to the address specified if the zero flag is set\n * @param cpu Cpu to operate on\n * @param operands [0] = jump address\n */\nexport default function jpZ(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const jumpAddress = cpu.readOperand(operands[0]);\n\n  if (cpu.flagZ) {\n    cpu.PC = jumpAddress;\n  }\n\n  return FLAGS_NO_CHANGE;\n}\n","import { FLAGS_NO_CHANGE, REG_PC } from '../constants';\nimport Cpu from '../Cpu';\nimport { Operand, OperandType, ResultFlags } from '../types';\nimport push from './push';\n\n/**\n * Call a given address (push next instruction onto stack for RET) if Zero flag is set\n * @param cpu Cpu to operate on\n * @param operands [0] = call address\n */\nexport default function callZ(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const jumpAddress = cpu.readOperand(operands[0]);\n  if (cpu.flagZ) {\n    push(cpu, [{ type: OperandType.Register16, target: REG_PC }]);\n    cpu.PC = jumpAddress;\n  }\n\n  return FLAGS_NO_CHANGE;\n}\n","import { FLAGS_NO_CHANGE, REG_PC } from '../constants';\nimport Cpu from '../Cpu';\nimport { Operand, OperandType, ResultFlags } from '../types';\nimport push from './push';\n\n/**\n * Call a given address (push next instruction onto stack for RET)\n * @param cpu Cpu to operate on\n * @param operands [0] = call address\n */\nexport default function call(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const jumpAddress = cpu.readOperand(operands[0]);\n  push(cpu, [{ type: OperandType.Register16, target: REG_PC }]);\n\n  cpu.PC = jumpAddress;\n\n  return FLAGS_NO_CHANGE;\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport rst from './rst';\nimport { ResultFlags } from '../types';\n\n/**\n * Restart at address 0x08\n * @param cpu Cpu to operate on\n */\nexport default function rst08(cpu: Cpu): ResultFlags {\n  rst(cpu, 0x08);\n  return FLAGS_NO_CHANGE;\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport { ResultFlags } from '../types';\nimport ret from './ret';\n\n/**\n * Return from subroutine if carry flag is not set\n * @param cpu Cpu to operate on\n */\nexport default function retNc(cpu: Cpu): ResultFlags {\n  if (!cpu.flagC) {\n    return ret(cpu);\n  }\n\n  return FLAGS_NO_CHANGE;\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Jump to the address specified if the carry flag is NOT set\n * @param cpu Cpu to operate on\n * @param operands [0] = jump address\n */\nexport default function jpNc(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const jumpAddress = cpu.readOperand(operands[0]);\n\n  if (!cpu.flagC) {\n    cpu.PC = jumpAddress;\n  }\n\n  return FLAGS_NO_CHANGE;\n}\n","import { FLAGS_NO_CHANGE, REG_PC } from '../constants';\nimport Cpu from '../Cpu';\nimport { Operand, OperandType, ResultFlags } from '../types';\nimport push from './push';\n\n/**\n * Call a given address (push next instruction onto stack for RET) if carry flag is NOT set\n * @param cpu Cpu to operate on\n * @param operands [0] = call address\n */\nexport default function callNc(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const jumpAddress = cpu.readOperand(operands[0]);\n  if (!cpu.flagC) {\n    push(cpu, [{ type: OperandType.Register16, target: REG_PC }]);\n    cpu.PC = jumpAddress;\n  }\n\n  return FLAGS_NO_CHANGE;\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport rst from './rst';\nimport { ResultFlags } from '../types';\n\n/**\n * Restart at address 0x10\n * @param cpu Cpu to operate on\n */\nexport default function rst10(cpu: Cpu): ResultFlags {\n  rst(cpu, 0x10);\n  return FLAGS_NO_CHANGE;\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport { ResultFlags } from '../types';\nimport ret from './ret';\n\n/**\n * Return from subroutine if carry flag is set\n * @param cpu Cpu to operate on\n */\nexport default function retC(cpu: Cpu): ResultFlags {\n  if (cpu.flagC) {\n    return ret(cpu);\n  }\n\n  return FLAGS_NO_CHANGE;\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport { ResultFlags } from '../types';\nimport ei from './ei';\nimport ret from './ret';\n\n/**\n * Return and enable interrupts\n * @param cpu Cpu to operate on\n */\nexport default function reti(cpu: Cpu): ResultFlags {\n  ret(cpu);\n  ei(cpu);\n\n  return FLAGS_NO_CHANGE;\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Jump to the address specified if the carry flag is set\n * @param cpu Cpu to operate on\n * @param operands [0] = jump address\n */\nexport default function jpC(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const jumpAddress = cpu.readOperand(operands[0]);\n\n  if (cpu.flagC) {\n    cpu.PC = jumpAddress;\n  }\n\n  return FLAGS_NO_CHANGE;\n}\n","import { FLAGS_NO_CHANGE, REG_PC } from '../constants';\nimport Cpu from '../Cpu';\nimport { Operand, OperandType, ResultFlags } from '../types';\nimport push from './push';\n\n/**\n * Call a given address (push next instruction onto stack for RET) if carry flag is set\n * @param cpu Cpu to operate on\n * @param operands [0] = call address\n */\nexport default function callC(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const jumpAddress = cpu.readOperand(operands[0]);\n  if (cpu.flagC) {\n    push(cpu, [{ type: OperandType.Register16, target: REG_PC }]);\n    cpu.PC = jumpAddress;\n  }\n\n  return FLAGS_NO_CHANGE;\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport rst from './rst';\nimport { ResultFlags } from '../types';\n\n/**\n * Restart at address 0x18\n * @param cpu Cpu to operate on\n */\nexport default function rst18(cpu: Cpu): ResultFlags {\n  rst(cpu, 0x18);\n  return FLAGS_NO_CHANGE;\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport rst from './rst';\nimport { ResultFlags } from '../types';\n\n/**\n * Restart at address 0x20\n * @param cpu Cpu to operate on\n */\nexport default function rst20(cpu: Cpu): ResultFlags {\n  rst(cpu, 0x20);\n  return FLAGS_NO_CHANGE;\n}\n","import Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Special add command that adds to SP\n * @param cpu Cpu to operate on\n * @param operands [0] = value to add to SP\n */\nexport default function addSp(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const value1 = cpu.SP;\n  const value2 = cpu.readOperand(operands[0]);\n  const result = value1 + value2;\n\n  const maskedResult = result & 0xffff;\n\n  cpu.SP = maskedResult;\n  return {\n    Z: false,\n    N: false,\n    H: (((value1 & 0xff) + (value2 & 0xff)) & 0x1000) === 0x1000,\n    C: (result & 0x10000) === 0x10000,\n  };\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport rst from './rst';\nimport { ResultFlags } from '../types';\n\n/**\n * Restart at address 0x28\n * @param cpu Cpu to operate on\n */\nexport default function rst28(cpu: Cpu): ResultFlags {\n  rst(cpu, 0x28);\n  return FLAGS_NO_CHANGE;\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport { ResultFlags } from '../types';\n\n/**\n * Disable interrupts\n * @param cpu Cpu to operate on\n */\nexport default function di(cpu: Cpu): ResultFlags {\n  cpu.interruptsEnabled = false;\n\n  return FLAGS_NO_CHANGE;\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport rst from './rst';\nimport { ResultFlags } from '../types';\n\n/**\n * Restart at address 0x30\n * @param cpu Cpu to operate on\n */\nexport default function rst30(cpu: Cpu): ResultFlags {\n  rst(cpu, 0x30);\n  return FLAGS_NO_CHANGE;\n}\n","import Cpu from '../Cpu';\nimport { checkAddHalfCarry } from '../helpers/checkAddHalfCarry';\nimport { ResultFlags } from '../types';\n\n/**\n * Unique operation to read a signed value, add it to SP and store it in HL\n * @param cpu Cpu to operate on\n */\nexport default function ldHlSpE8(cpu: Cpu): ResultFlags {\n  const value = cpu.read8Signed();\n  cpu.HL = cpu.SP + value;\n\n  return {\n    Z: false,\n    N: false,\n    H: checkAddHalfCarry(cpu.SP, value),\n    C: (cpu.HL & 0x100) === 0x100,\n  };\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport rst from './rst';\nimport { ResultFlags } from '../types';\n\n/**\n * Restart at address 0x38\n * @param cpu Cpu to operate on\n */\nexport default function rst38(cpu: Cpu): ResultFlags {\n  rst(cpu, 0x38);\n  return FLAGS_NO_CHANGE;\n}\n","import Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Check if a specific bit is set\n * @param cpu Cpu to operate on\n * @param operands [0] = the bit to check, [1] = value to check\n */\nexport default function bit(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const bit = cpu.readOperand(operands[0]);\n  const value = cpu.readOperand(operands[1]);\n  const bitValue = Math.pow(2, bit);\n\n  return {\n    Z: (value & bitValue) === 0,\n    N: false,\n    H: true,\n    C: null,\n  };\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Reset (set to 0) a specific bit\n * @param cpu Cpu to operate on\n * @param operands [0] = the bit to reset, [1] = value to operate on\n */\nexport default function res(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const bit = cpu.readOperand(operands[0]);\n  const value = cpu.readOperand(operands[1]);\n  const bitValue = Math.pow(2, bit);\n\n  cpu.writeToOperand(operands[1], value & ~bitValue);\n\n  return FLAGS_NO_CHANGE;\n}\n","import { FLAGS_NO_CHANGE } from '../constants';\nimport Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Set (set to 1) a specific bit\n * @param cpu Cpu to operate on\n * @param operands [0] = the bit to set, [1] = value to operate on\n */\nexport default function set(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const bit = cpu.readOperand(operands[0]);\n  const value = cpu.readOperand(operands[1]);\n  const bitValue = Math.pow(2, bit);\n\n  cpu.writeToOperand(operands[1], value | bitValue);\n\n  return FLAGS_NO_CHANGE;\n}\n","import Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Shift a value left (logical) into the carry ([7] => Carry, 0 => [0])\n * @param cpu Cpu to operate on\n * @param operands [0] = value to shift left\n */\nexport default function sla(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const value = cpu.readOperand(operands[0]);\n  const result = value << 1;\n  const maskedResult = result & 0xff;\n\n  cpu.writeToOperand(operands[0], maskedResult);\n\n  return {\n    Z: maskedResult === 0,\n    N: false,\n    H: false,\n    C: (result & 0x100) === 0x100,\n  };\n}\n","import Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Shift a value right (arithmetic) into the carry ([0] => Carry, [7] => [7])\n * Preserves 7th/signing bit\n * @param cpu Cpu to operate on\n * @param operands [0] = value to shift right\n */\nexport default function sra(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const value = cpu.readOperand(operands[0]);\n  const result = (value >> 1) | (value & 0x80);\n  const maskedResult = result & 0xff;\n\n  cpu.writeToOperand(operands[0], maskedResult);\n\n  return {\n    Z: maskedResult === 0,\n    N: false,\n    H: false,\n    C: (value & 0x01) === 0x01,\n  };\n}\n","import Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Shift a value right (logical) into the carry ([0] => Carry, 0 => [7])\n * @param cpu Cpu to operate on\n * @param operands [0] = value to shift right\n */\nexport default function srl(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const value = cpu.readOperand(operands[0]);\n  const result = value >> 1;\n  const maskedResult = result & 0xff;\n\n  cpu.writeToOperand(operands[0], maskedResult);\n\n  return {\n    Z: maskedResult === 0,\n    N: false,\n    H: false,\n    C: (value & 0x01) === 0x01,\n  };\n}\n","import Cpu from '../Cpu';\nimport { Operand, ResultFlags } from '../types';\n\n/**\n * Swap the upper and lower bits of a byte\n * @param cpu Cpu to operate on\n * @param operands [0] = value to swap the bits of\n */\nexport default function swap(cpu: Cpu, operands: Operand[]): ResultFlags {\n  const value = cpu.readOperand(operands[0]);\n  const result = (value << 4) | (value >> 4);\n  const maskedResult = result & 0xff;\n\n  cpu.writeToOperand(operands[0], maskedResult);\n\n  return {\n    Z: maskedResult === 0,\n    N: false,\n    H: false,\n    C: false,\n  };\n}\n","import {\n  REG_A,\n  REG_B,\n  REG_C,\n  REG_D,\n  REG_E,\n  REG_H,\n  REG_HL,\n  REG_L,\n} from '../constants';\nimport bit from '../operations/bit';\nimport res from '../operations/res';\nimport rl from '../operations/rl';\nimport rlc from '../operations/rlc';\nimport rr from '../operations/rr';\nimport rrc from '../operations/rrc';\nimport set from '../operations/set';\nimport sla from '../operations/sla';\nimport sra from '../operations/sra';\nimport srl from '../operations/srl';\nimport swap from '../operations/swap';\nimport { OpCode, OperandType } from '../types';\n\nconst prefixed: Record<number, OpCode> = {\n  0x00: {\n    action: rlc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'RLC B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x01: {\n    action: rlc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'RLC C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x02: {\n    action: rlc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'RLC D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x03: {\n    action: rlc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'RLC E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x04: {\n    action: rlc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'RLC H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x05: {\n    action: rlc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'RLC L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x06: {\n    action: rlc,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'RLC (HL)',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x07: {\n    action: rlc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'RLC A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x08: {\n    action: rrc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'RRC B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x09: {\n    action: rrc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'RRC C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x0a: {\n    action: rrc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'RRC D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x0b: {\n    action: rrc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'RRC E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x0c: {\n    action: rrc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'RRC H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x0d: {\n    action: rrc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'RRC L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x0e: {\n    action: rrc,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'RRC (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0x0f: {\n    action: rrc,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'RRC A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x10: {\n    action: rl,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'RL B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x11: {\n    action: rl,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'RL C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x12: {\n    action: rl,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'RL D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x13: {\n    action: rl,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'RL E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x14: {\n    action: rl,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'RL H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x15: {\n    action: rl,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'RL L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x16: {\n    action: rl,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'RL (HL)',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x17: {\n    action: rl,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'RL A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x18: {\n    action: rr,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'RR B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x19: {\n    action: rr,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'RR C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x1a: {\n    action: rr,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'RR D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x1b: {\n    action: rr,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'RR E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x1c: {\n    action: rr,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'RR H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x1d: {\n    action: rr,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'RR L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x1e: {\n    action: rr,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'RR (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0x1f: {\n    action: rr,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'RR A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x20: {\n    action: sla,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'SLA B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x21: {\n    action: sla,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'SLA C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x22: {\n    action: sla,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'SLA D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x23: {\n    action: sla,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'SLA E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x24: {\n    action: sla,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'SLA H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x25: {\n    action: sla,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'SLA L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x26: {\n    action: sla,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'SLA (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0x27: {\n    action: sla,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'SLA A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x28: {\n    action: sra,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'SRA B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x29: {\n    action: sra,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'SRA C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x2a: {\n    action: sra,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'SRA D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x2b: {\n    action: sra,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'SRA E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x2c: {\n    action: sra,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'SRA H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x2d: {\n    action: sra,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'SRA L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x2e: {\n    action: sra,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'SRA (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0x2f: {\n    action: sra,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'SRA A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x30: {\n    action: swap,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'SWP B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x31: {\n    action: swap,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'SWP C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x32: {\n    action: swap,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'SWP D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x33: {\n    action: swap,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'SWP E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x34: {\n    action: swap,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'SWP H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x35: {\n    action: swap,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'SWP L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x36: {\n    action: swap,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'SWP (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0x37: {\n    action: swap,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'SWP A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x38: {\n    action: srl,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'SRL B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x39: {\n    action: srl,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'SRL C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x3a: {\n    action: srl,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'SRL D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x3b: {\n    action: srl,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'SRL E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x3c: {\n    action: srl,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'SRL H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x3d: {\n    action: srl,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'SRL L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x3e: {\n    action: srl,\n    operands: [\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'SRL (HL)',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x3f: {\n    action: srl,\n    operands: [\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'SRL A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x40: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 0,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'BIT 0, B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x41: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 0,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'BIT 0, C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x42: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 0,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'BIT 0, D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x43: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 0,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'BIT 0, E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x44: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 0,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'BIT 0, H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x45: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 0,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'BIT 0, L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x46: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 0,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'BIT 0, (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0x47: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 0,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'BIT 0, A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x48: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 1,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'BIT 1, B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x49: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 1,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'BIT 1, C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x4a: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 1,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'BIT 1, D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x4b: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 1,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'BIT 1, E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x4c: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 1,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'BIT 1, H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x4d: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 1,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'BIT 1, L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x4e: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 1,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'BIT 1, (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0x4f: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 1,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'BIT 1, A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x50: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 2,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'BIT 2, B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x51: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 2,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'BIT 2, C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x52: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 2,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'BIT 2, D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x53: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 2,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'BIT 2, E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x54: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 2,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'BIT 2, H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x55: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 2,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'BIT 2, L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x56: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 2,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'BIT 2, (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0x57: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 2,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'BIT 2, A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x58: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 3,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'BIT 3, B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x59: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 3,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'BIT 3, C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x5a: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 3,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'BIT 3, D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x5b: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 3,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'BIT 3, E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x5c: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 3,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'BIT 3, H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x5d: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 3,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'BIT 3, L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x5e: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 3,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'BIT 3, (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0x5f: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 3,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'BIT 3, A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x60: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 4,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'BIT 4, B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x61: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 4,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'BIT 4, C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x62: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 4,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'BIT 4, D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x63: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 4,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'BIT 4, E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x64: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 4,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'BIT 4, H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x65: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 4,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'BIT 4, L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x66: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 4,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'BIT 4, (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0x67: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 4,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'BIT 4, A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x68: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 5,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'BIT 5, B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x69: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 5,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'BIT 5, C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x6a: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 5,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'BIT 5, D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x6b: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 5,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'BIT 5, E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x6c: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 5,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'BIT 5, H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x6d: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 5,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'BIT 5, L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x6e: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 5,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'BIT 5, (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0x6f: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 5,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'BIT 5, A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x70: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 6,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'BIT 6, B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x71: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 6,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'BIT 6, C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x72: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 6,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'BIT 6, D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x73: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 6,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'BIT 6, E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x74: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 6,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'BIT 6, H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x75: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 6,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'BIT 6, L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x76: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 6,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'BIT 6, (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0x77: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 6,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'BIT 6, A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x78: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 7,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'BIT 7, B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x79: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 7,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'BIT 7, C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x7a: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 7,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'BIT 7, D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x7b: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 7,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'BIT 7, E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x7c: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 7,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'BIT 7, H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x7d: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 7,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'BIT 7, L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x7e: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 7,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'BIT 7, (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0x7f: {\n    action: bit,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 7,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'BIT 7, A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x80: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 0,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'RES 0, B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x81: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 0,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'RES 0, C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x82: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 0,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'RES 0, D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x83: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 0,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'RES 0, E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x84: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 0,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'RES 0, H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x85: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 0,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'RES 0, L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x86: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 0,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'RES 0, (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0x87: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 0,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'RES 0, A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x88: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 1,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'RES 1, B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x89: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 1,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'RES 1, C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x8a: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 1,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'RES 1, D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x8b: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 1,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'RES 1, E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x8c: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 1,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'RES 1, H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x8d: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 1,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'RES 1, L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x8e: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 1,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'RES 1, (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0x8f: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 1,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'RES 1, A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x90: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 2,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'RES 2, B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x91: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 2,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'RES 2, C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x92: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 2,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'RES 2, D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x93: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 2,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'RES 2, E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x94: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 2,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'RES 2, H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x95: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 2,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'RES 2, L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x96: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 2,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'RES 2, (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0x97: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 2,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'RES 2, A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x98: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 3,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'RES 3, B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x99: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 3,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'RES 3, C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x9a: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 3,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'RES 3, D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x9b: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 3,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'RES 3, E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x9c: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 3,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'RES 3, H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x9d: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 3,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'RES 3, L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0x9e: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 3,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'RES 3, (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0x9f: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 3,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'RES 3, A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xa0: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 4,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'RES 4, B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xa1: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 4,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'RES 4, C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xa2: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 4,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'RES 4, D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xa3: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 4,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'RES 4, E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xa4: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 4,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'RES 4, H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xa5: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 4,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'RES 4, L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xa6: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 4,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'RES 4, (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0xa7: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 4,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'RES 4, A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xa8: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 5,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'RES 5, B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xa9: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 5,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'RES 5, C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xaa: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 5,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'RES 5, D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xab: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 5,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'RES 5, E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xac: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 5,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'RES 5, H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xad: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 5,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'RES 5, L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xae: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 5,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'RES 5, (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0xaf: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 5,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'RES 5, A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xb0: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 6,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'RES 6, B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xb1: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 6,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'RES 6, C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xb2: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 6,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'RES 6, D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xb3: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 6,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'RES 6, E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xb4: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 6,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'RES 6, H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xb5: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 6,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'RES 6, L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xb6: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 6,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'RES 6, (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0xb7: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 6,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'RES 6, A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xb8: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 7,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'RES 7, B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xb9: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 7,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'RES 7, C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xba: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 7,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'RES 7, D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xbb: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 7,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'RES 7, E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xbc: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 7,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'RES 7, H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xbd: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 7,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'RES 7, L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xbe: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 7,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'RES 7, (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0xbf: {\n    action: res,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 7,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'RES 7, A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xc0: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 0,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'SET 0, B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xc1: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 0,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'SET 0, C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xc2: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 0,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'SET 0, D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xc3: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 0,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'SET 0, E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xc4: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 0,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'SET 0, H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xc5: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 0,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'SET 0, L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xc6: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 0,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'SET 0, (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0xc7: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 0,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'SET 0, A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xc8: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 1,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'SET 1, B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xc9: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 1,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'SET 1, C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xca: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 1,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'SET 1, D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xcb: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 1,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'SET 1, E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xcc: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 1,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'SET 1, H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xcd: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 1,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'SET 1, L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xce: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 1,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'SET 1, (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0xcf: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 1,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'SET 1, A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xd0: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 2,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'SET 2, B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xd1: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 2,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'SET 2, C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xd2: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 2,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'SET 2, D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xd3: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 2,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'SET 2, E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xd4: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 2,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'SET 2, H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xd5: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 2,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'SET 2, L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xd6: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 2,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'SET 2, (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0xd7: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 2,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'SET 2, A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xd8: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 3,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'SET 3, B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xd9: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 3,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'SET 3, C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xda: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 3,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'SET 3, D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xdb: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 3,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'SET 3, E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xdc: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 3,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'SET 3, H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xdd: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 3,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'SET 3, L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xde: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 3,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'SET 3, (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0xdf: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 3,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'SET 3, A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xe0: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 4,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'SET 4, B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xe1: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 4,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'SET 4, C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xe2: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 4,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'SET 4, D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xe3: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 4,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'SET 4, E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xe4: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 4,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'SET 4, H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xe5: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 4,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'SET 4, L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xe6: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 4,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'SET 4, (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0xe7: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 4,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'SET 4, A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xe8: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 5,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'SET 5, B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xe9: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 5,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'SET 5, C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xea: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 5,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'SET 5, D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xeb: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 5,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'SET 5, E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xec: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 5,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'SET 5, H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xed: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 5,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'SET 5, L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xee: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 5,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'SET 5, (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0xef: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 5,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'SET 5, A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xf0: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 6,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'SET 6, B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xf1: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 6,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'SET 6, C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xf2: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 6,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'SET 6, D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xf3: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 6,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'SET 6, E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xf4: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 6,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'SET 6, H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xf5: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 6,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'SET 6, L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xf6: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 6,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'SET 6, (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0xf7: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 6,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'SET 6, A',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xf8: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 7,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_B,\n      },\n    ],\n    mnemonic: 'SET 7, B',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xf9: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 7,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_C,\n      },\n    ],\n    mnemonic: 'SET 7, C',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xfa: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 7,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_D,\n      },\n    ],\n    mnemonic: 'SET 7, D',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xfb: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 7,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_E,\n      },\n    ],\n    mnemonic: 'SET 7, E',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xfc: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 7,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_H,\n      },\n    ],\n    mnemonic: 'SET 7, H',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xfd: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 7,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_L,\n      },\n    ],\n    mnemonic: 'SET 7, L',\n    bytes: 1,\n    cycles: 8,\n  },\n  0xfe: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 7,\n      },\n      {\n        type: OperandType.Register16,\n        target: REG_HL,\n        isAddress: true,\n      },\n    ],\n    mnemonic: 'SET 7, (HL)',\n    bytes: 1,\n    cycles: 16,\n  },\n  0xff: {\n    action: set,\n    operands: [\n      {\n        type: OperandType.Value,\n        target: 7,\n      },\n      {\n        type: OperandType.Register8,\n        target: REG_A,\n      },\n    ],\n    mnemonic: 'SET 7, A',\n    bytes: 1,\n    cycles: 8,\n  },\n};\n\nexport default prefixed;\n","import MemoryMap from '../memory/MemoryMap';\nimport {\n  DIVIDER_FREQUENCY,\n  REG_A,\n  REG_F,\n  REG_B,\n  REG_C,\n  REG_D,\n  REG_E,\n  REG_H,\n  REG_L,\n  REG_AF,\n  REG_BC,\n  REG_DE,\n  REG_HL,\n  REG_SP,\n  REG_PC,\n  BIT_FLAG_Z,\n  BIT_FLAG_N,\n  BIT_FLAG_H,\n  BIT_FLAG_C,\n  MASK_FLAG_Z,\n  MASK_FLAG_N,\n  MASK_FLAG_H,\n  MASK_FLAG_C,\n} from './constants';\nimport { mainOpCodes, prefixedOpCodes } from './opCodeMaps';\nimport { Operand, OperandModifier, OperandType } from './types';\n\ntype OpHistory = {\n  step: number;\n  PC: string;\n  codeString: string;\n  mnemonic: string;\n  nextBytes: number[];\n  nextBytesSigned: number[];\n};\n\nconst MAX_HISTORY = 1000;\n\n/**\n * Class emulating the CPU\n */\nexport default class Cpu {\n  private memoryMap: MemoryMap;\n\n  private step = 0;\n  private cycleOffset = 0;\n  private opHistory: OpHistory[] = [];\n\n  private registersBuffer: ArrayBuffer = new ArrayBuffer(12);\n  private registersView: DataView = new DataView(this.registersBuffer);\n\n  private dividerTick: number = 0;\n  private timerTick: number = 0;\n\n  // Interrupts\n  public interruptsEnabled: boolean = false;\n\n  public serialData: number[] = [];\n\n  // Getters to access registers array buffer\n  // 8 bit\n  public get A(): number {\n    return this.getRegister(REG_A);\n  }\n  public get F(): number {\n    return this.getRegister(REG_F);\n  }\n  public get B(): number {\n    return this.getRegister(REG_B);\n  }\n  public get C(): number {\n    return this.getRegister(REG_C);\n  }\n  public get D(): number {\n    return this.getRegister(REG_D);\n  }\n  public get E(): number {\n    return this.getRegister(REG_E);\n  }\n  public get H(): number {\n    return this.getRegister(REG_H);\n  }\n  public get L(): number {\n    return this.getRegister(REG_L);\n  }\n  // 16 bit\n  public get AF(): number {\n    return this.getRegister16(REG_AF);\n  }\n  public get BC(): number {\n    return this.getRegister16(REG_BC);\n  }\n  public get DE(): number {\n    return this.getRegister16(REG_DE);\n  }\n  public get HL(): number {\n    return this.getRegister16(REG_HL);\n  }\n  public get SP(): number {\n    return this.getRegister16(REG_SP);\n  }\n  public get PC(): number {\n    return this.getRegister16(REG_PC);\n  }\n  // Flag boolean get helpers\n  public get flagZ(): boolean {\n    return (this.F & BIT_FLAG_Z) === BIT_FLAG_Z;\n  }\n  public get flagN(): boolean {\n    return (this.F & BIT_FLAG_N) === BIT_FLAG_N;\n  }\n  public get flagH(): boolean {\n    return (this.F & BIT_FLAG_H) === BIT_FLAG_H;\n  }\n  public get flagC(): boolean {\n    return (this.F & BIT_FLAG_C) === BIT_FLAG_C;\n  }\n\n  // Setters to access registers array buffer\n  // 8 bit\n  public set A(value: number) {\n    this.setRegister(REG_A, value);\n  }\n  public set F(value: number) {\n    this.setRegister(REG_F, value & 0xf0);\n  }\n  public set B(value: number) {\n    this.setRegister(REG_B, value);\n  }\n  public set C(value: number) {\n    this.setRegister(REG_C, value);\n  }\n  public set D(value: number) {\n    this.setRegister(REG_D, value);\n  }\n  public set E(value: number) {\n    this.setRegister(REG_E, value);\n  }\n  public set H(value: number) {\n    this.setRegister(REG_H, value);\n  }\n  public set L(value: number) {\n    this.setRegister(REG_L, value);\n  }\n  // 16 bit\n  public set AF(value: number) {\n    this.setRegister16(REG_AF, value & 0xfff0);\n  }\n  public set BC(value: number) {\n    this.setRegister16(REG_BC, value);\n  }\n  public set DE(value: number) {\n    this.setRegister16(REG_DE, value);\n  }\n  public set HL(value: number) {\n    this.setRegister16(REG_HL, value);\n  }\n  public set SP(value: number) {\n    this.setRegister16(REG_SP, value);\n  }\n  public set PC(value: number) {\n    this.setRegister16(REG_PC, value);\n  }\n  // Flag boolean set helpers\n  public set flagZ(value: boolean) {\n    if (value) {\n      this.F = this.F | BIT_FLAG_Z;\n    } else {\n      this.F = this.F & MASK_FLAG_Z;\n    }\n  }\n  public set flagN(value: boolean) {\n    if (value) {\n      this.F = this.F | BIT_FLAG_N;\n    } else {\n      this.F = this.F & MASK_FLAG_N;\n    }\n  }\n  public set flagH(value: boolean) {\n    if (value) {\n      this.F = this.F | BIT_FLAG_H;\n    } else {\n      this.F = this.F & MASK_FLAG_H;\n    }\n  }\n  public set flagC(value: boolean) {\n    if (value) {\n      this.F = this.F | BIT_FLAG_C;\n    } else {\n      this.F = this.F & MASK_FLAG_C;\n    }\n  }\n\n  constructor(memoryMap: MemoryMap) {\n    this.memoryMap = memoryMap;\n  }\n\n  /**\n   * Read the value of an operand from its specified location\n   * @param operand The operand details\n   */\n  public readOperand(operand: Operand): number {\n    let value: number;\n    switch (operand.type) {\n      case OperandType.Immediate8: {\n        value = this.read8();\n        break;\n      }\n      case OperandType.Immediate8Signed: {\n        value = this.read8Signed();\n        break;\n      }\n      case OperandType.Immediate16: {\n        value = this.read16();\n        break;\n      }\n      case OperandType.Register8: {\n        value = this.getRegister(operand.target!);\n        break;\n      }\n      case OperandType.Register16: {\n        value = this.getRegister16(operand.target!);\n        // Special cases for HL that modify it on access\n        if (operand.modifier === OperandModifier.Increment) {\n          this.HL += 1;\n        } else if (operand.modifier === OperandModifier.Decrement) {\n          this.HL -= 1;\n        }\n        break;\n      }\n      case OperandType.Value: {\n        // Values are stored in the operand (e.g. BIT 7, A)\n        return operand.target!;\n      }\n    }\n\n    if (\n      operand.isAddress &&\n      (operand.type === OperandType.Immediate8 ||\n        operand.type === OperandType.Register8)\n    ) {\n      return this.read8(0xff00 | value);\n    } else if (operand.isAddress) {\n      return this.read8(value);\n    }\n\n    return value;\n  }\n\n  /**\n   * Write a value to the location specified by an operand\n   * @param operand The operand details\n   * @param value The value to set\n   */\n  public writeToOperand(operand: Operand, value: number): void {\n    if (operand.isAddress) {\n      // Get the address stored at the operand target to write at\n      let targetAddress: number;\n      switch (operand.type) {\n        case OperandType.Immediate8: {\n          targetAddress = this.read8() | 0xff00;\n          break;\n        }\n        case OperandType.Immediate8Signed: {\n          throw new Error('Immediate8Signed cannot be an address');\n        }\n        case OperandType.Immediate16: {\n          targetAddress = this.read16();\n          break;\n        }\n        case OperandType.Register8: {\n          targetAddress = this.getRegister(operand.target!) | 0xff00;\n          break;\n        }\n        case OperandType.Register16: {\n          targetAddress = this.getRegister16(operand.target!);\n          break;\n        }\n        case OperandType.Value: {\n          throw Error('Invalid operand type - cannot write direct value');\n        }\n      }\n      this.write8(targetAddress, value);\n    } else {\n      // If target isn't an address, only registers can be targeted\n      switch (operand.type) {\n        case OperandType.Register8: {\n          this.setRegister(operand.target!, value);\n          break;\n        }\n        case OperandType.Register16: {\n          this.setRegister16(operand.target!, value);\n          break;\n        }\n        default: {\n          throw new Error(\n            `Invalid direct target operand for write: ${operand.type}`,\n          );\n        }\n      }\n    }\n\n    // Special cases for HL that modify it on access\n    if (operand.modifier === OperandModifier.Increment) {\n      this.HL += 1;\n    } else if (operand.modifier === OperandModifier.Decrement) {\n      this.HL -= 1;\n    }\n  }\n\n  /**\n   * Get the value of a register\n   * @param register The register offset\n   */\n  public getRegister(register: number): number {\n    return this.registersView.getUint8(register);\n  }\n\n  /**\n   * Get the value of a 16bit register (2 8bit combined)\n   * @param register The register offset\n   */\n  public getRegister16(register: number): number {\n    return this.registersView.getUint16(register, false);\n  }\n\n  /**\n   * Set the value of a register\n   * @param register The register offset\n   * @param value The value to set\n   */\n  public setRegister(register: number, value: number): void {\n    // Need to mask the lower 4 bits of register F\n    if (register === REG_F) {\n      this.registersView.setUint8(register, value & 0xf0);\n    } else {\n      this.registersView.setUint8(register, value);\n    }\n  }\n\n  /**\n   * Set the value of a 16bit register (2 8bit combined)\n   * @param register The register offset\n   * @param value The value to set\n   */\n  public setRegister16(register: number, value: number): void {\n    // Need to mask the lower 4 bits of register F\n    if (register === REG_AF) {\n      this.registersView.setUint16(register, value & 0xfff0, false);\n    } else {\n      this.registersView.setUint16(register, value, false);\n    }\n  }\n\n  /**\n   * Reset the CPU\n   */\n  public reset() {\n    // Clear registers\n    for (let i = 0; i < this.registersView.byteLength; i++) {\n      this.registersView.setUint8(i, 0);\n    }\n\n    // Point the program counter at the entry point and stack pointer to the top of ram\n    this.PC = 0x100;\n    this.SP = 0xfffe;\n  }\n\n  /**\n   * Run one clock cycle of the CPU\n   */\n  public tick(): boolean {\n    this.updateDivider();\n    this.updateTimer();\n\n    // Wait for main clock to catch up\n    this.cycleOffset -= 1;\n    if (this.cycleOffset > 0) {\n      return true;\n    }\n\n    if (this.handleInterrupt()) {\n      return true;\n    }\n\n    let opCode = this.read8();\n    const isCbCode = opCode === 0xcb;\n    const opCodeTable = isCbCode ? prefixedOpCodes : mainOpCodes;\n    // Prefixed op code, read actual op code\n    if (isCbCode) {\n      opCode = this.read8();\n    }\n\n    if (!opCodeTable[opCode]) {\n      console.log(\n        'Unknown opcode: ',\n        `${isCbCode ? '0xCB ' : ''}${opCode.toString(16)}`,\n      );\n      return false;\n    }\n    const operation = opCodeTable[opCode];\n\n    // + DEBUG ---\n    this.opHistory.push({\n      step: this.step,\n      PC: `${(this.PC - 1)} [${(this.PC - 1).toString(16)}]`,\n      codeString: opCode.toString(16),\n      mnemonic: operation.mnemonic,\n      nextBytes: [\n        this.memoryMap.read8(this.PC),\n        this.memoryMap.read8(this.PC + 1),\n      ],\n      nextBytesSigned: [\n        this.memoryMap.read8Signed(this.PC),\n        this.memoryMap.read8Signed(this.PC + 1),\n      ],\n    });\n\n    if (this.opHistory.length > MAX_HISTORY) {\n      this.opHistory.shift();\n    }\n    // - DEBUG ---\n\n    const resultFlags = operation.action(this, operation.operands);\n    this.flagZ = resultFlags.Z ?? this.flagZ;\n    this.flagN = resultFlags.N ?? this.flagN;\n    this.flagH = resultFlags.H ?? this.flagH;\n    this.flagC = resultFlags.C ?? this.flagC;\n\n    this.step += 1;\n\n    // Set how many cycles to wait before next operation\n    this.cycleOffset = operation.cycles - 1;\n    return true;\n  }\n\n  /**\n   * Read an 8bit int from memory at the given offset\n   * Update the PC for direct reads (no address specified)\n   * @param address The address offset (PC if not set)\n   */\n  public read8(address: number | null = null): number {\n    const targetAddress = address ?? this.PC;\n\n    // TODO: Masked/blocked reads, etc.\n    const value = this.memoryMap.read8(targetAddress);\n\n    // Advance the program counter if read is immediate\n    if (address === null) {\n      this.PC += 1;\n    }\n    return value;\n  }\n\n  /**\n   * Read an 8bit signed int from memory at the given offset\n   * Update the PC for direct reads (no address specified)\n   * @param address The address offset (PC if not set)\n   */\n  public read8Signed(address: number | null = null): number {\n    const targetAddress = address ?? this.PC;\n\n    // TODO: Masked/blocked reads, etc.\n    const value = this.memoryMap.read8Signed(targetAddress);\n\n    // Advance the program counter if read is immediate\n    if (address === null) {\n      this.PC += 1;\n    }\n    return value;\n  }\n\n  /**\n   * Read an 16bit int from memory at the given offset\n   * Update the PC for direct reads (no address specified)\n   * @param address The address offset (PC if not set)\n   */\n  public read16(address: number | null = null): number {\n    const targetAddress = address ?? this.PC;\n\n    // TODO: Masked/blocked reads, etc.\n    const value = this.memoryMap.read16(targetAddress);\n\n    // Advance the program counter if read is immediate\n    if (address === null) {\n      this.PC += 2;\n    }\n    return value;\n  }\n\n  /**\n   * Write an 8bit int to memory at the given offset\n   * @param address The address to write to\n   * @param value The 8bit value to write\n   */\n  public write8(address: number, value: number): void {\n    if (this.writeMasking(address, value)) {\n      return;\n    }\n\n    this.memoryMap.write8(address, value);\n  }\n\n  /**\n   * Write a 16bit int to memory at the given offset\n   * @param address The address to write to\n   * @param value The 16bit value to write\n   */\n  public write16(address: number, value: number): void {\n    if (this.writeMasking(address, value)) {\n      return;\n    }\n\n    this.memoryMap.write16(address, value);\n  }\n\n  /**\n   * Helper to intercept writing to special addresses\n   * @param address The address to check before writing\n   * @param value The value that is being written\n   * @returns Whether the write was intercepted\n   */\n  private writeMasking(address: number, value: number): boolean {\n    // TODO: ROM Bank Select\n    if (address === 0x2000) {\n      return true;\n    }\n\n    // Serial port\n    if (address === 0xff01) {\n      this.serialData.push(value);\n    }\n\n    if (address === 0xff04) {\n      // Divider register - reset to 0 when any value is written to it\n      this.memoryMap.write8(address, 0);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Update the divider each cycle\n   */\n  private updateDivider(): void {\n    this.dividerTick += 1;\n    if (this.dividerTick === DIVIDER_FREQUENCY) {\n      this.dividerTick = 0;\n      const divider = this.memoryMap.read8(0xff04) + 1;\n      this.memoryMap.write8(0xff04, divider & 0xff);\n    }\n  }\n\n  /**\n   * Update the timer each cycle\n   */\n  private updateTimer(): void {\n    const timerControl = this.memoryMap.read8(0xff07);\n    const timerEnabled = (timerControl & 0x04) === 0x04;\n    if (timerEnabled) {\n      const timerFreqFlag = timerControl & 0x02;\n      let timerFreq = 4096;\n      if (timerFreqFlag === 0x01) {\n        timerFreq = 262144;\n      } else if (timerFreqFlag === 0x02) {\n        timerFreq = 65536;\n      } else if (timerFreqFlag === 0x03) {\n        timerFreq = 16384;\n      }\n      this.timerTick += 1;\n\n      if (this.timerTick === timerFreq) {\n        this.timerTick = 0;\n        const timer = this.memoryMap.read8(0xff05) + 1;\n\n        // Overflow, write modulo to timer and trigger IRQ\n        if (timer > 0xff) {\n          const timerModulo = this.memoryMap.read8(0xff06);\n          this.memoryMap.write8(0xff05, timerModulo);\n          // Trigger IRQ\n          const irq = this.memoryMap.read8(0xff0f) | 0x04;\n          this.memoryMap.write8(0xff0f, irq);\n        } else {\n          this.memoryMap.write8(0xff05, timer & 0xff);\n        }\n      }\n    }\n  }\n\n  /**\n   * Check for and handle interrupts\n   * @returns Whether an interrupt was handled\n   */\n  private handleInterrupt(): boolean {\n    if (this.interruptsEnabled) {\n      const irq = this.memoryMap.read8(0xff0f); // Interrupt Request Flag\n      const irqe = this.memoryMap.read8(0xffff); // Interrupt Request Enable\n\n      // Determine the vector based on which bit is set\n      // Prioritized from bit 0 - 4\n      let interruptVector = 0;\n      let bitMask = 0x1f; // Default to no clearing\n      if ((irq & irqe & 0x01) === 0x01) {\n        // VSync\n        bitMask = 0x1e;\n        interruptVector = 0x0040;\n      } else if ((irq & irqe & 0x02) === 0x02) {\n        // LCD STAT\n        bitMask = 0x1d;\n        interruptVector = 0x0048;\n      } else if ((irq & irqe & 0x04) === 0x04) {\n        // Timer\n        bitMask = 0x1b;\n        interruptVector = 0x0050;\n      } else if ((irq & irqe & 0x08) === 0x08) {\n        // Serial\n        bitMask = 0x17;\n        interruptVector = 0x0058;\n      } else if ((irq & irqe & 0x10) === 0x10) {\n        // Joypad\n        bitMask = 0x0f;\n        interruptVector = 0x0060;\n      }\n\n      // No interrupts matched\n      if (interruptVector === 0) {\n        return false;\n      }\n\n      // Disable any further interrupts until re-enabled\n      this.interruptsEnabled = false;\n\n      // Clear the flag for the interrupt being processed\n      this.memoryMap.write8(0xff0f, irq & bitMask);\n      // Push the current PC onto the stack\n      this.SP -= 2;\n      this.memoryMap.write16(this.SP, this.PC);\n\n      // Jump to the Interrupt Vector\n      this.PC = interruptVector;\n      this.cycleOffset = 5;\n      return true;\n    }\n\n    return false;\n  }\n}\n","import MemoryMap from '../memory/MemoryMap';\n\nconst colors = [0x00000000, 0xffaaaaaa, 0xff555555, 0xff000000];\n\nconst screenWidth = 160;\nconst screenHeight = 144;\n\nconst bufferWidth = 256;\nconst bufferHeight = 256;\n\nconst statsBarHeight = 16;\n\nclass ImageLayer {\n  public imageData: ImageData;\n  public pixelArray: Uint32Array;\n\n  constructor(imageData: ImageData) {\n    this.imageData = imageData;\n    this.imageData.data.fill(0x00);\n    this.pixelArray = new Uint32Array(this.imageData.data.buffer);\n  }\n}\n\n/**\n * Class for emulating the Picture Processing Unit (PPU)\n */\nexport default class Ppu {\n  private memoryMap: MemoryMap;\n  private canvas: HTMLCanvasElement;\n  private ctx: CanvasRenderingContext2D;\n\n  private bufferCanvas: HTMLCanvasElement;\n  private bufferCtx: CanvasRenderingContext2D;\n\n  private backgroundLayer: ImageLayer;\n  private windowLayer: ImageLayer;\n  private spriteLayer: ImageLayer;\n\n  private bufferLayer: ImageLayer;\n\n  private lastUpdate: number = 0;\n  private updateSamples: number[] = [];\n  private updateAverage: number | null = null;\n  private fpsSampleRate = 50;\n\n  private currentScanline = 0;\n  private currentScanlineOffset = 0;\n\n  /**\n   * LCDC state\n   */\n  private lcdc: number = 0;\n  private bgWindowEnable: number = 0;\n  private objEnable: number = 0;\n  private objSize: number = 0;\n  private bgTileMap: number = 0;\n  private tileSource: number = 0;\n  private windowEnable: number = 0;\n  private windowTileMap: number = 0;\n  private lcdPpuEnable: number = 0;\n\n  /**\n   * STAT State\n   */\n  private stat: number = 0;\n  private mode: number = 0;\n  private coincidence: number = 0;\n  private mode0HBlank: number = 0;\n  private mode1VBlank: number = 0;\n  private mode2Oam: number = 0;\n  private myCoincidence: number = 0;\n\n  constructor(memoryMap: MemoryMap, canvas: HTMLCanvasElement) {\n    this.memoryMap = memoryMap;\n    this.canvas = canvas;\n\n    // TODO: Make scale configurable\n    const scale = 2;\n    this.canvas.width = 160 * scale;\n    this.canvas.height = 144 * scale + statsBarHeight;\n\n    const ctx = canvas.getContext('2d');\n    if (ctx === null) {\n      throw new Error('Failed to get canvas 2D Context.');\n    }\n\n    this.backgroundLayer = new ImageLayer(\n      ctx.createImageData(bufferWidth, bufferHeight),\n    );\n    this.windowLayer = new ImageLayer(\n      ctx.createImageData(bufferWidth, bufferHeight),\n    );\n    this.spriteLayer = new ImageLayer(\n      ctx.createImageData(bufferWidth, bufferHeight),\n    );\n    this.bufferLayer = new ImageLayer(\n      ctx.createImageData(bufferWidth, bufferHeight),\n    );\n\n    this.bufferCanvas = document.createElement('canvas');\n    this.bufferCanvas.width = screenWidth;\n    this.bufferCanvas.height = screenHeight;\n    this.bufferCtx = this.bufferCanvas.getContext('2d')!;\n\n    this.ctx = ctx;\n\n    this.memoryMap.write8(0xff40, 0x80);\n  }\n\n  /**\n   * Run one cycle of the clock, updates scan lines\n   */\n  public tick() {\n    this.updateState();\n    if (!this.lcdPpuEnable) {\n      this.currentScanline = 0;\n      this.currentScanlineOffset = 0;\n      const lcdStat = this.memoryMap.read8(0xff41);\n      this.memoryMap.write8(0xff41, lcdStat & 0xfc); // Set mode to 0, TODO:  LYC=LY (Coincidence)?\n      this.memoryMap.write8(0xff44, this.currentScanline);\n      return;\n    }\n\n    this.currentScanlineOffset += 1;\n    if (this.currentScanlineOffset === 456) {\n      this.currentScanlineOffset = 0;\n      this.currentScanline =\n        this.currentScanline === 153 ? 0 : this.currentScanline + 1;\n    }\n    this.memoryMap.write8(0xff44, this.currentScanline);\n\n    let updatedLcdStat = this.memoryMap.read8(0xff41);\n    let updatedInterrupts = this.memoryMap.read8(0xff0f);\n\n    const lycInterruptEnabled = (updatedInterrupts & 0x40) === 0x40;\n    const mode2OAMInterruptEnabled = (updatedInterrupts & 0x40) === 0x20;\n    // TODO: Does this flag need to be checked when firing VBlank IRQ?\n    // const mode1VBlankInterruptEnabled = (updatedInterrupts & 0x40) === 0x10;\n    const mode0HBlankInterruptEnabled = (updatedInterrupts & 0x40) === 0x08;\n\n    let lcdStatInterrupt = false;\n\n    // Clear the mode and LYC (Coincidence), set below\n    updatedLcdStat = updatedLcdStat & 0xf8;\n    if (this.currentScanline < 143) {\n      if (this.currentScanlineOffset < 80) {\n        updatedLcdStat |= 0x02;\n        lcdStatInterrupt = mode2OAMInterruptEnabled || lcdStatInterrupt;\n      } else if (this.currentScanlineOffset < 252) {\n        updatedLcdStat |= 0x03;\n      } else if (this.currentScanlineOffset === 252) {\n        // updatedLcdStat |= 0 : 0 During HBlank\n        lcdStatInterrupt = mode0HBlankInterruptEnabled || lcdStatInterrupt;\n      }\n    } else if (\n      this.currentScanline === 144 &&\n      this.currentScanlineOffset === 0\n    ) {\n      updatedLcdStat |= 0x01;\n      updatedInterrupts |= 0x01;\n    } else {\n      updatedLcdStat |= 0x01;\n    }\n\n    const lyc = this.memoryMap.read8(0xff45);\n    if (lyc === this.currentScanline) {\n      updatedLcdStat |= 0x04;\n      lcdStatInterrupt = lycInterruptEnabled || lcdStatInterrupt;\n    }\n\n    if (lcdStatInterrupt) {\n      updatedInterrupts |= 0x02;\n    }\n\n    // Update stats and interrupts\n    this.memoryMap.write8(0xff41, updatedLcdStat);\n    this.memoryMap.write8(0xff0f, updatedInterrupts);\n    // TODO: Move pixel manipulation to tick, keep drawing in update\n  }\n\n  /**\n   * The update the rendering (once per frame)\n   */\n  public update() {\n    this.updateState();\n\n    const scrollY = this.memoryMap.read8(0xff42);\n    const scrollX = this.memoryMap.read8(0xff43);\n    // const lcdY = this.memoryMap.read8(0xff44);\n    // const lyCompare = this.memoryMap.read8(0xff45);\n    // const dmaTransfer = this.memoryMap.read8(0xFF46);\n    const windowY = this.memoryMap.read8(0xff4a);\n    const windowX = this.memoryMap.read8(0xff4b);\n\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    if (this.bgWindowEnable) {\n      // Draw the background onto the buffer so that it can be transferred\n      // to the appropriate offset for scroll X/Y\n      if (this.bgTileMap === 0) {\n        this.renderTileMap(0x9800, this.bufferLayer);\n      } else {\n        this.renderTileMap(0x9c00, this.bufferLayer);\n      }\n      const startOffset = scrollY * 256 + scrollX;\n      for (let i = 0; i < this.bufferLayer.pixelArray.length; i++) {\n        let offset = i + startOffset;\n        if (offset >= 65536) {\n          offset -= 65536;\n        }\n        this.backgroundLayer.pixelArray[i] =\n          this.bufferLayer.pixelArray[offset];\n      }\n\n      this.renderLayer(this.backgroundLayer, 0, 0);\n    }\n\n    if (this.objEnable) {\n      this.renderSprites();\n      this.renderLayer(this.spriteLayer, 0, 0);\n    }\n\n    if (this.windowEnable) {\n      if (this.windowTileMap === 0) {\n        this.renderTileMap(0x9800, this.windowLayer);\n      } else {\n        this.renderTileMap(0x9c00, this.windowLayer);\n      }\n      this.renderLayer(this.windowLayer, windowX, windowY);\n    }\n\n    // FPS Helper\n    this.renderFps();\n  }\n\n  /**\n   * Read the latest LCDC and STAT states and\n   * store them locally\n   */\n  private updateState(): void {\n    const lcdc = this.memoryMap.read8(0xff40);\n    this.bgWindowEnable = lcdc & 1;\n    this.objEnable = (lcdc & 2) >> 1;\n    this.objSize = (lcdc & 4) >> 2;\n    this.bgTileMap = (lcdc & 8) >> 3;\n    this.tileSource = (lcdc & 16) >> 4;\n    this.windowEnable = (lcdc & 32) >> 5;\n    this.windowTileMap = (lcdc & 64) >> 6;\n    this.lcdPpuEnable = (lcdc & 128) >> 7;\n\n    const stat = this.memoryMap.read8(0xff41);\n    this.mode = stat & 3; // Uses first two bits\n    this.coincidence = (stat & 4) >> 2;\n    this.mode0HBlank = (stat & 8) >> 3;\n    this.mode1VBlank = (stat & 16) >> 4;\n    this.mode2Oam = (stat & 32) >> 5;\n    this.myCoincidence = (stat & 64) >> 6;\n    // 7th bit unused?\n  }\n\n  /**\n   * Render a layer onto the screen canvas\n   * @param layer The layer to render\n   * @param x The x coordinate to render the layer at\n   * @param y The y coordinate to render the layer at\n   */\n  private renderLayer(layer: ImageLayer, x: number, y: number) {\n    this.bufferCtx.putImageData(layer.imageData, 0, 0);\n    this.ctx.drawImage(\n      this.bufferCanvas,\n      x,\n      y,\n      this.canvas.width,\n      this.canvas.height - statsBarHeight,\n    );\n  }\n\n  /**\n   * Render a tile onto a layer\n   * @param address The address of the tile\n   * @param target The layer to render the tile onto\n   */\n  private renderTileMap(address: number, target: ImageLayer) {\n    for (let i = 0; i < 1024; i++) {\n      const y = Math.floor(i / 32);\n      const x = i - y * 32;\n\n      const tileNumber =\n        this.tileSource === 0\n          ? this.memoryMap.read8Signed(address + i)\n          : this.memoryMap.read8(address + i);\n      this.renderTile(x * 8, y * 8, tileNumber, this.tileSource, target);\n    }\n  }\n\n  /**\n   * Render all sprites on to the sprite layer\n   */\n  private renderSprites() {\n    // Clear current sprite data\n    this.spriteLayer.pixelArray.fill(0x000000);\n\n    for (let i = 0; i < 40; i++) {\n      const y = this.memoryMap.read8(0xfe00 + i * 4);\n      const x = this.memoryMap.read8(0xfe00 + i * 4 + 1);\n      const tileNumber = this.memoryMap.read8(0xfe00 + i * 4 + 2);\n      // const flags = this.memoryMap.read8(0xfe00 + i * 4 + 3);\n      // TODO Read:\n      // Bit 0-2 Palette number (CGB Only)\n      // Bit 3 Tile VRAM Bank (CGB Only)\n      // bit 4 Palette Number (0=OBP0, 1=OBP1)\n      // bit 5 x flip (1 = flip)\n      // bit 6 y flip (1 = flip)\n      // bit 7 obj-bg priority (0 obj above, 1 obj behind)\n\n      this.renderTile(x - 8, y - 16, tileNumber, 1, this.spriteLayer, true);\n    }\n  }\n\n  /**\n   * Render a tile onto a layer\n   * @param x The x coordinate to render the tile at\n   * @param y The y coordinate to render the tile at\n   * @param tileNumber The tile number within the OAM\n   * @param tileDataLocationFlag The flag to indicate the tile number indexing method\n   * @param target The layer to render the tile onto\n   * @param isSprite If the tile is a sprite\n   */\n  private renderTile(\n    x: number,\n    y: number,\n    tileNumber: number,\n    tileDataLocationFlag: number,\n    target: ImageLayer,\n    isSprite: boolean = false,\n  ) {\n    const tileSize = this.objSize === 1 && isSprite ? 16 : 8;\n    const tileOffset = tileSize == 16 ? tileNumber & 0xfe : tileNumber; // For 16, ignore the lower bit\n    const address =\n      (tileDataLocationFlag === 0 ? 0x9000 : 0x8000) + tileOffset * 16;\n    for (let row = 0; row < tileSize; row++) {\n      const byte1 = this.memoryMap.read8(address + row * 2);\n      const byte2 = this.memoryMap.read8(address + row * 2 + 1);\n\n      for (let column = 0; column < 8; column++) {\n        const bit1 = (byte1 >> (7 - column)) & 1;\n        const bit2 = (byte2 >> (7 - column)) & 1;\n        const colorValue = bit1 + (bit2 << 1);\n\n        const color = colors[colorValue];\n        const offset = (y + row) * bufferWidth + x + column;\n        target.pixelArray[offset] = color;\n      }\n    }\n  }\n\n  /**\n   * Render the FPS at the bottom of the screen\n   */\n  private renderFps() {\n    const now = performance.now();\n    const updateTime = now - this.lastUpdate || 1;\n    this.lastUpdate = now;\n\n    this.updateSamples.push(updateTime);\n\n    if (this.updateSamples.length === this.fpsSampleRate) {\n      this.updateAverage =\n        this.updateSamples.reduce((acc, val) => acc + val, 0) /\n        this.fpsSampleRate;\n      this.updateSamples = [];\n    }\n\n    const fpsString = this.updateAverage\n      ? Math.round(1000 / this.updateAverage)\n      : '-';\n    const updateString = this.updateAverage\n      ? Math.round(this.updateAverage * 1000) / 1000\n      : '-';\n    this.ctx.save();\n    this.ctx.fillStyle = 'black';\n    this.ctx.fillRect(\n      0,\n      this.canvas.height - statsBarHeight,\n      this.canvas.width,\n      statsBarHeight,\n    );\n    this.ctx.fillStyle = 'white';\n    this.ctx.textBaseline = 'bottom';\n    this.ctx.fillText(\n      `FPS: ${fpsString} (${updateString}ms)`,\n      4,\n      this.canvas.height - 2,\n    );\n    this.ctx.restore();\n  }\n}\n","import MemoryMap from '../memory/MemoryMap';\n\n/**\n * 0x0f = 00001111b - Input bits all high\n * 0x37 = 00110111b - BIT 3 Low\n * 0x3b = 00111011b - BIT 2 Low\n * 0x3d = 00111101b - BIT 1 Low\n * 0x3e = 00111110b - BIT 0 Low\n */\nconst BIT_INPUTS_HIGH = 0x0f;\nconst BIT_MASK_DOWN_START = 0x37;\nconst BIT_MASK_UP_SELECT = 0x3b;\nconst BIT_MASK_LEFT_B = 0x3d;\nconst BIT_MASK_RIGHT_A = 0x3e;\n\nconst INPUT_START = 'START';\nconst INPUT_SELECT = 'SELECT';\nconst INPUT_A = 'A';\nconst INPUT_B = 'B';\nconst INPUT_DOWN = 'DOWN';\nconst INPUT_UP = 'UP';\nconst INPUT_LEFT = 'LEFT';\nconst INPUT_RIGHT = 'RIGHT';\n\nenum INPUT_TYPE {\n  INPUT_TYPE_BUTTON = 'BUTTON',\n  INPUT_TYPE_DIRECTION = 'DIRECTION',\n}\n\ntype InputMask = {\n  type: INPUT_TYPE;\n  mask: number;\n};\n\n/**\n * Map of inputs to their type and bit to mask\n */\nconst INPUT_BIT_MAP: Record<string, InputMask> = {\n  [INPUT_START]: {\n    type: INPUT_TYPE.INPUT_TYPE_BUTTON,\n    mask: BIT_MASK_DOWN_START,\n  },\n  [INPUT_SELECT]: {\n    type: INPUT_TYPE.INPUT_TYPE_BUTTON,\n    mask: BIT_MASK_UP_SELECT,\n  },\n  [INPUT_B]: {\n    type: INPUT_TYPE.INPUT_TYPE_BUTTON,\n    mask: BIT_MASK_LEFT_B,\n  },\n  [INPUT_A]: {\n    type: INPUT_TYPE.INPUT_TYPE_BUTTON,\n    mask: BIT_MASK_RIGHT_A,\n  },\n  [INPUT_DOWN]: {\n    type: INPUT_TYPE.INPUT_TYPE_DIRECTION,\n    mask: BIT_MASK_DOWN_START,\n  },\n  [INPUT_UP]: {\n    type: INPUT_TYPE.INPUT_TYPE_DIRECTION,\n    mask: BIT_MASK_UP_SELECT,\n  },\n  [INPUT_LEFT]: {\n    type: INPUT_TYPE.INPUT_TYPE_DIRECTION,\n    mask: BIT_MASK_LEFT_B,\n  },\n  [INPUT_RIGHT]: {\n    type: INPUT_TYPE.INPUT_TYPE_DIRECTION,\n    mask: BIT_MASK_RIGHT_A,\n  },\n};\n\n// TODO: Make keys configurable\nconst INPUT_KEY_MAP: Record<string, string> = {\n  w: INPUT_UP,\n  a: INPUT_LEFT,\n  s: INPUT_DOWN,\n  d: INPUT_RIGHT,\n  ArrowUp: INPUT_UP,\n  ArrowLeft: INPUT_LEFT,\n  ArrowDown: INPUT_DOWN,\n  ArrowRight: INPUT_RIGHT,\n\n  Enter: INPUT_START,\n  Shift: INPUT_SELECT,\n  ' ': INPUT_A,\n  Control: INPUT_B,\n};\n\n/**\n * Class for managing input/joypad emulation\n */\nexport default class Joypad {\n  private memoryMap: MemoryMap;\n  private inputPressed: boolean = false;\n  private pressedInputs: string[] = [];\n\n  constructor(memoryMap: MemoryMap) {\n    this.memoryMap = memoryMap;\n  }\n\n  public init() {\n    window.addEventListener('keydown', this.onKeyDown);\n    window.addEventListener('keyup', this.onKeyUp);\n  }\n\n  public tick() {\n    if (this.inputPressed) {\n      this.inputPressed = false;\n      // TODO: Fire interrupt\n    }\n\n    // Pull down direct and button bits based on\n    // which buttons are pressed\n    let buttonBits = BIT_INPUTS_HIGH;\n    let directionBits = BIT_INPUTS_HIGH;\n    this.pressedInputs.forEach((input) => {\n      const inputDetails = INPUT_BIT_MAP[input];\n      if (inputDetails.type === INPUT_TYPE.INPUT_TYPE_BUTTON) {\n        buttonBits &= inputDetails.mask;\n      } else {\n        directionBits &= inputDetails.mask;\n      }\n    });\n\n    // The game will indicate whether the buttons or\n    // direction are being read by pulling down\n    // bit 4/5 (0x10 / 0x20)\n    let joypadState = this.memoryMap.read8(0xff00);\n    if ((joypadState & 0x10) !== 0x10) {\n      joypadState |= directionBits;\n    } else if ((joypadState & 0x20) !== 0x20) {\n      joypadState |= buttonBits;\n    } else {\n      joypadState |= BIT_INPUTS_HIGH;\n    }\n\n    // Write back the state including the pulled down bits\n    this.memoryMap.write8(0xff00, joypadState);\n  }\n\n  /**\n   * Helper for debugging\n   */\n  public getPressedInputs(): string[] {\n    return this.pressedInputs;\n  }\n\n  /**\n   * Callback when a key is pressed\n   * @param evt The keyboard event\n   */\n  private onKeyDown = (evt: KeyboardEvent): void => {\n    const input = INPUT_KEY_MAP[evt.key] ?? null;\n    if (input !== null && !this.pressedInputs.includes(input)) {\n      this.inputPressed = true;\n      this.pressedInputs.push(input);\n    }\n  };\n\n  /**\n   * Callback when a key is released\n   * @param evt The keyboard event\n   */\n  private onKeyUp = (evt: KeyboardEvent): void => {\n    const input = INPUT_KEY_MAP[evt.key] ?? null;\n    if (input !== null && this.pressedInputs.includes(input)) {\n      this.pressedInputs.splice(this.pressedInputs.indexOf(input), 1);\n    }\n  };\n}\n","const ADDRESS_OAM_DMA_REQUEST = 0xff46;\nconst SPRITES_OFFSET = 0xfe00;\n/**\n * Class to manage memory access\n */\nexport default class MemoryMap {\n  /**\n   * Memory buffer\n   * 0x0000 -> 0x3FFF : (16K) Cart ROM Bank 0\n   * 0x4000 -> 0x7FFF : (16K) Cart ROM Bank 1\n   * 0x8000 -> 0x9FFF : (8K) Video RAM\n   * 0xA000 -> 0xBFFF : (8K) Cart RAM\n   * 0xC000 -> 0xCFFF : (4K) Internal RAM Bank 0 (WRAM)\n   * 0xD000 -> 0xDFFF : (4K) Internal RAM Bank 1 (WRAM)\n   * 0xE000 -> 0xFDFF : (7.5K) Mirror of C000 -> DDFF\n   * 0xFE00 -> 0xFE9F : (160) Sprites (OAM)\n   * 0xFEA0 -> 0xFEFF : (95) Unusable\n   * 0xFF00 -> 0xFF7F : (128) IO Registers\n   * 0xFF80 -> 0xFFFE : (127) High RAM (HRAM)\n   * 0xFFFF           : (1) Interrupt Enable Register\n   */\n  private memoryBuffer: ArrayBuffer = new ArrayBuffer(0x10000);\n  private memoryView: DataView = new DataView(this.memoryBuffer);\n\n  private cartDataBuffer: ArrayBuffer | null = null; // The cart itself\n  private cartData: Uint8Array | null = null;\n\n  /**\n   * Load a game cart into memory\n   * @param cartDataBuffer An ArrayBuffer containing the cart data\n   */\n  public loadCart(cartDataBuffer: ArrayBuffer) {\n    this.cartDataBuffer = cartDataBuffer;\n    this.cartData = new Uint8Array(this.cartDataBuffer);\n    for (let i = 0; i < 0x8000; i++) {\n      this.memoryView.setUint8(i, this.cartData[i]);\n    }\n  }\n\n  /**\n   * Read 1 byte of data as an 8bit int\n   * @param address The address to read\n   */\n  public read8(address: number): number {\n    if (!this.canRead(address)) {\n      return 0;\n    }\n\n    return this.memoryView.getUint8(address);\n  }\n\n  /**\n   * Read 1 byte of data as an 8bit signed int\n   * @param address The address to read\n   */\n  public read8Signed(address: number): number {\n    if (!this.canRead(address)) {\n      return 0;\n    }\n\n    return this.memoryView.getInt8(address);\n  }\n\n  /**\n   * Read 2 bytes of data as a 16bit int\n   * @param address The address to read\n   */\n  public read16(address: number): number {\n    if (!this.canRead(address)) {\n      return 0;\n    }\n\n    return this.memoryView.getUint16(address, true);\n  }\n\n  /**\n   * Write an 8bit int\n   * @param address The address to write the value to\n   * @param value The integer value to write\n   */\n  public write8(address: number, value: number): void {\n    // DMA Transfer\n    if (address == ADDRESS_OAM_DMA_REQUEST) {\n      const fromAddress = value << 8;\n      for (let i = 0; i < 0x9f; i++) {\n        this.memoryView.setUint8(\n          SPRITES_OFFSET + i,\n          this.read8(fromAddress + i),\n        );\n      }\n\n      return;\n    }\n\n    this.memoryView.setUint8(address, value);\n  }\n\n  /**\n   * Write a 16bit int\n   * @param address The address to write the value to\n   * @param value The integer value to write\n   */\n  public write16(address: number, value: number): void {\n    this.memoryView.setUint16(address, value, true);\n  }\n\n  /**\n   * Check if an address is readable (within bounds / not restricted)\n   * @param address The address to check\n   */\n  private canRead(address: number): boolean {\n    // Restricted / unknown for 0xFEA0 -> 0xFEFF\n    if (address >= 0xfea0 && address <= 0xfeff) {\n      return false;\n    }\n\n    // Bounds check\n    if (address < 0 || address >= this.memoryBuffer.byteLength) {\n      return false;\n    }\n\n    return true;\n  }\n}\n","/**\n * Get the hex representation of a number, padded to the specified width\n * @param value The value to get the hex representation of\n * @param width How many digits to pad the result to\n */\nexport default function getHexString(value: number, width: number = 2): string {\n  const hex = value.toString(16);\n  if (hex.length < width) {\n    return `${'0'.repeat(width - hex.length)}${hex}`;\n  } else {\n    return `${hex}`;\n  }\n}\n","/**\n * Get a 8bit padded binary string for a given number\n * @param value The number to get the binary string for\n */\nexport default function getBinaryString(value: number): string {\n  const hex = value.toString(2);\n  return `${'0'.repeat(8 - hex.length)}${hex}b`;\n}\n","// ~4.19 MHz\nexport const CORE_CLOCK = 4194304;\n","/**\n * Class representing an audio channel\n */\nexport default class Channel {\n  private audioCtx: AudioContext;\n  private volume: number = 0;\n  private isStarted: boolean = false;\n\n  private oscillatorNode: OscillatorNode;\n  private gainNode: GainNode;\n\n  public isMuted: boolean = false;\n\n  constructor(audioCtx: AudioContext, output: AudioNode) {\n    this.audioCtx = audioCtx;\n\n    this.gainNode = audioCtx.createGain();\n    this.gainNode.gain.setValueAtTime(this.volume, audioCtx.currentTime);\n    this.gainNode.connect(output);\n\n    this.oscillatorNode = audioCtx.createOscillator();\n    this.oscillatorNode.type = 'square';\n    this.oscillatorNode.connect(this.gainNode);\n\n    // TODO: Create periodic waves for different square waves with duty cycle other than 50%\n    // this.periodicWave = audioCtx.createPeriodicWave(\n    //   sineWave.real,\n    //   sineWave.imag\n    // );\n  }\n\n  /**\n   * Start the channel\n   */\n  public start(): void {\n    if (!this.isStarted) {\n      this.oscillatorNode.start();\n      this.isStarted = true;\n    }\n  }\n\n  /**\n   * Set the frequency of the underlying oscillator\n   * @param frequency The frequency to set\n   */\n  public setFrequency(frequency: number): void {\n    this.oscillatorNode.frequency.setValueAtTime(\n      frequency,\n      this.audioCtx.currentTime,\n    );\n  }\n\n  /**\n   * Set the volume of the channel\n   * @param volume Volume level (0 - 1)\n   */\n  public setVolume(volume: number): void {\n    this.volume = volume;\n    this.gainNode.gain.setValueAtTime(this.volume, this.audioCtx.currentTime);\n\n    this.isMuted = volume === 0;\n  }\n\n  /**\n   * Get the current volume of the channel\n   * @returns The volume\n   */\n  public getVolume(): number {\n    return this.volume;\n  }\n\n  /**\n   * Mute the channel\n   */\n  public mute(): void {\n    this.gainNode.gain.setValueAtTime(0, this.audioCtx.currentTime);\n    this.isMuted = true;\n  }\n\n  /**\n   * Unmute the channel\n   */\n  public unmute(): void {\n    if (this.volume === 0) {\n      this.volume = 1;\n    }\n    this.gainNode.gain.setValueAtTime(this.volume, this.audioCtx.currentTime);\n    this.isMuted = false;\n  }\n}\n","import { CORE_CLOCK } from '../core/constants';\nimport MemoryMap from '../memory/MemoryMap';\nimport Channel from './Channel';\n\n// APU clock = 512Hz, Main clock = 4.19GHz, Factor = 8192\nconst CLOCK_FACTOR = CORE_CLOCK / 512;\n\n/**\n * Class for emulating the Audio Processing Unit (APU)\n */\nexport default class Apu {\n  private memoryMap: MemoryMap;\n  private audioCtx: AudioContext;\n  private channel1: Channel;\n  private channel2: Channel;\n\n  private masterGainNode: GainNode;\n\n  private clockOffset: number = 0;\n  private volume: number = 0.5;\n\n  constructor(memoryMap: MemoryMap) {\n    this.memoryMap = memoryMap;\n    this.audioCtx = new AudioContext();\n\n    // Create master gain all output goes through for volume control\n    this.masterGainNode = this.audioCtx.createGain();\n    this.masterGainNode.connect(this.audioCtx.destination);\n    this.masterGainNode.gain.setValueAtTime(\n      this.volume,\n      this.audioCtx.currentTime,\n    );\n\n    this.channel1 = new Channel(this.audioCtx, this.masterGainNode);\n    this.channel2 = new Channel(this.audioCtx, this.masterGainNode);\n  }\n\n  /**\n   * Run one clock cycle of the APU\n   */\n  public tick() {\n    // Scale the APU clock to the core clock\n    this.clockOffset -= 1;\n    if (this.clockOffset > 0) {\n      return;\n    }\n\n    this.updateChannel1();\n    this.updateChannel2();\n    // TODO: Handle Channel 3 and 4 (Wave and Noise)\n\n    this.clockOffset = CLOCK_FACTOR;\n  }\n\n  /**\n   * Pause audio output\n   */\n  public pause(): Promise<void> {\n    return this.audioCtx.suspend();\n  }\n\n  /**\n   * Resume audio output\n   */\n  public resume(): Promise<void> {\n    this.channel1.setVolume(0.5);\n    this.channel1.start();\n\n    this.channel2.setVolume(0.5);\n    this.channel2.start();\n\n    return this.audioCtx.resume();\n  }\n\n  /**\n   * Set the volume of the APU\n   * @param volume The volume to set (0-1)\n   */\n  public setVolume(volume: number): void {\n    this.volume = volume;\n    this.masterGainNode.gain.setValueAtTime(volume, this.audioCtx.currentTime);\n  }\n\n  /**\n   * Update the output on channel 1\n   */\n  private updateChannel1(): void {\n    const details = this.getChannelDetails(0xff10);\n    this.channel1.setFrequency(details.frequency);\n    this.channel1.setVolume(details.envelopeInitialVolume / 0x0f);\n    // TODO: Sweep, envelope, length countdown\n    // Length counter @ 256Hz (1/2 APU clock)\n    // Sweep @ 128Hz (1/4 APU clock)\n    // Volume envelope 64Hz (1/8 APU clock)\n  }\n\n  /**\n   * Update the output on channel 2\n   */\n  private updateChannel2(): void {\n    const details = this.getChannelDetails(0xff15);\n    this.channel2.setFrequency(details.frequency);\n    this.channel2.setVolume(details.envelopeInitialVolume / 0x0f);\n    // TODO: Envelope, length countdown\n    // Length counter @ 256Hz (1/2 APU clock)\n    // Volume envelope 64Hz (1/8 APU clock)\n  }\n\n  /**\n   * Get audio channel details from memory\n   * @param offset The memory offset to read details from\n   */\n  private getChannelDetails(offset: number) {\n    // Sweep adjusts freq\n    // Envelope adjust volume\n    // NR10 (Not used on NR20)\n    const sweep = this.memoryMap.read8(offset);\n    // NR11/21\n    const dutyAndLength = this.memoryMap.read8(offset + 1);\n    // NR12/22\n    const envelope = this.memoryMap.read8(offset + 2);\n    // NR13/23\n    const freqLowBits = this.memoryMap.read8(offset + 3);\n    // NR14/24\n    const freqHighBitsAndDetails = this.memoryMap.read8(offset + 4);\n\n    const sweepTime = (sweep & 0x70) >> 4;\n    const sweepDirection = (sweep & 0x08) >> 3;\n    const sweepShift = sweep & 0x07;\n\n    const duty = (dutyAndLength & 0xc0) >> 6;\n    const length = dutyAndLength & 0x3f;\n\n    const envelopeInitialVolume = (envelope & 0xf0) >> 4;\n    const envelopeDirection = (envelope & 0x08) >> 3;\n    const envelopePeriod = envelope & 0x07;\n\n    const restartSound = (freqHighBitsAndDetails & 0x80) >> 7;\n    const lengthEnabled = (freqHighBitsAndDetails & 0x40) >> 6;\n\n    // Frequency is stored in 11 bit, across NR13/23 and NR14/24 bits 0-3\n    const freqHighBits = freqHighBitsAndDetails & 0x07;\n    const freq11Bits = freqLowBits | (freqHighBits << 8);\n    const frequency = CORE_CLOCK / ((2048 - freq11Bits) << 5);\n\n    return {\n      sweepTime,\n      sweepDirection,\n      sweepShift,\n\n      duty,\n      length,\n      lengthSeconds: (64 - length) * (1 / 256),\n\n      envelopeInitialVolume,\n      envelopeDirection,\n      envelopePeriod,\n\n      frequency,\n      restartSound,\n      lengthEnabled,\n    };\n  }\n}\n","import Cpu from '../cpu/Cpu';\nimport Ppu from '../gpu/Ppu';\nimport Joypad from '../io/Joypad';\nimport MemoryMap from '../memory/MemoryMap';\nimport getHexString from '../util/getHexString';\nimport getBinaryString from '../util/getBinaryString';\nimport { CORE_CLOCK } from './constants';\nimport Apu from '../audio/Apu';\n\n/**\n * The core Game Boy class\n */\nexport default class GB {\n  private cpu: Cpu;\n  private gpu: Ppu;\n  private apu: Apu;\n  private joypad: Joypad;\n  private memoryMap: MemoryMap;\n\n  private isRunning: boolean = false;\n  private isPaused: boolean = false;\n  private isAudioEnabled: boolean = true;\n  private animationFrameRequest: number | null = null;\n\n  private dbgA: HTMLElement;\n  private dbgF: HTMLElement;\n  private dbgAF: HTMLElement;\n  private dbgB: HTMLElement;\n  private dbgC: HTMLElement;\n  private dbgBC: HTMLElement;\n  private dbgD: HTMLElement;\n  private dbgE: HTMLElement;\n  private dbgDE: HTMLElement;\n  private dbgH: HTMLElement;\n  private dbgL: HTMLElement;\n  private dbgHL: HTMLElement;\n  private dbgPC: HTMLElement;\n  private dbgSP: HTMLElement;\n\n  private dbgJoypad: HTMLElement;\n\n  private dbgSound1: HTMLElement;\n  private dbgSound2: HTMLElement;\n  private dbgSound3: HTMLElement;\n  private dbgSound4: HTMLElement;\n\n  private dbgTilesCanvas: HTMLCanvasElement;\n  private dbgTilesCtx: CanvasRenderingContext2D;\n  private dbgOam: HTMLElement;\n  private dbgLcdC: HTMLElement;\n  private dbgSerial: HTMLElement;\n\n  constructor(canvas: HTMLCanvasElement) {\n    this.memoryMap = new MemoryMap();\n    this.cpu = new Cpu(this.memoryMap);\n    this.gpu = new Ppu(this.memoryMap, canvas);\n    this.apu = new Apu(this.memoryMap);\n    this.joypad = new Joypad(this.memoryMap);\n\n    this.joypad.init();\n    this.gpu.tick();\n\n    // Debug references\n    this.dbgA = document.getElementById('dbg_a')!;\n    this.dbgF = document.getElementById('dbg_f')!;\n    this.dbgAF = document.getElementById('dbg_af')!;\n    this.dbgB = document.getElementById('dbg_b')!;\n    this.dbgC = document.getElementById('dbg_c')!;\n    this.dbgBC = document.getElementById('dbg_bc')!;\n    this.dbgD = document.getElementById('dbg_d')!;\n    this.dbgE = document.getElementById('dbg_e')!;\n    this.dbgDE = document.getElementById('dbg_de')!;\n    this.dbgH = document.getElementById('dbg_h')!;\n    this.dbgL = document.getElementById('dbg_l')!;\n    this.dbgHL = document.getElementById('dbg_hl')!;\n    this.dbgPC = document.getElementById('dbg_pc')!;\n    this.dbgSP = document.getElementById('dbg_sp')!;\n\n    this.dbgJoypad = document.getElementById('dbg_joypad')!;\n\n    this.dbgSound1 = document.getElementById('dbg_sound1')!;\n    this.dbgSound2 = document.getElementById('dbg_sound2')!;\n    this.dbgSound3 = document.getElementById('dbg_sound3')!;\n    this.dbgSound4 = document.getElementById('dbg_sound4')!;\n\n    this.dbgTilesCanvas = document.getElementById(\n      'dbg_tiles',\n    )! as HTMLCanvasElement;\n    this.dbgTilesCtx = this.dbgTilesCanvas.getContext('2d')!;\n    this.dbgOam = document.getElementById('dbg_oam')!;\n    this.dbgLcdC = document.getElementById('dbg_lcdc')!;\n    this.dbgSerial = document.getElementById('dbg_serial')!;\n  }\n\n  /**\n   * Pause/unpause emulation\n   */\n  public togglePause(): boolean {\n    this.isPaused = !this.isPaused;\n    if (this.isPaused && this.isAudioEnabled) {\n      this.apu.pause();\n    } else if (this.isAudioEnabled) {\n      this.apu.resume();\n    }\n    return this.isPaused;\n  }\n\n  /**\n   * Enable audio output\n   */\n  public enableAudio(): void {\n    this.isAudioEnabled = true;\n    this.apu.resume();\n  }\n\n  /**\n   * Disable audio output\n   */\n  public disableAudio(): void {\n    this.isAudioEnabled = false;\n    this.apu.pause();\n  }\n\n  /**\n   * Set the volume\n   * @param volume The volume to set (0 - 100)\n   */\n  public setVolume(volume: number): void {\n    this.apu.setVolume(volume / 100);\n  }\n\n  /**\n   * Load a cart into the emulator\n   * @param cartData An array buffer containing the cart data\n   */\n  public loadCart(cartData: ArrayBuffer) {\n    console.log('load cart');\n    this.memoryMap.loadCart(cartData);\n    this.cpu.reset();\n\n    if (this.isAudioEnabled) {\n      this.apu.resume();\n    }\n\n    this.isRunning = true;\n    if (this.animationFrameRequest) {\n      window.cancelAnimationFrame(this.animationFrameRequest);\n    }\n    this.animationFrameRequest = requestAnimationFrame(this.update);\n  }\n\n  /**\n   * The update callback - called per frame (requestAnimationFrame)\n   */\n  private update = (): void => {\n    if (!this.isRunning) {\n      this.animationFrameRequest = null;\n      return;\n    }\n\n    // Pause loop\n    if (this.isPaused) {\n      this.animationFrameRequest = requestAnimationFrame(this.update);\n      return;\n    }\n\n    let cycles = 0;\n    // TODO: Adjust cycles based on framerate\n    // Game Boy Freq: 4.19 MHz @ 60FPS\n    while (cycles < CORE_CLOCK / 60) {\n      this.joypad.tick();\n\n      const cpuSuccess = this.cpu.tick();\n      this.gpu.tick();\n\n      if (this.isAudioEnabled) {\n        this.apu.tick();\n      }\n\n      // Halt if CPU cycle fails\n      if (!cpuSuccess) {\n        return;\n      }\n      cycles += 1;\n    }\n\n    this.gpu.update();\n    this.updateDebug();\n    this.animationFrameRequest = requestAnimationFrame(this.update);\n  };\n\n  /**\n   * Debug - update UI with debug info\n   */\n  private updateDebug = (): void => {\n    this.dbgA.innerHTML = getHexString(this.cpu.A);\n    this.dbgF.innerHTML = getHexString(this.cpu.F);\n    this.dbgB.innerHTML = getHexString(this.cpu.B);\n    this.dbgC.innerHTML = getHexString(this.cpu.C);\n    this.dbgD.innerHTML = getHexString(this.cpu.D);\n    this.dbgE.innerHTML = getHexString(this.cpu.E);\n    this.dbgH.innerHTML = getHexString(this.cpu.H);\n    this.dbgL.innerHTML = getHexString(this.cpu.L);\n    this.dbgAF.innerHTML = getHexString(this.cpu.AF, 4);\n    this.dbgBC.innerHTML = getHexString(this.cpu.BC, 4);\n    this.dbgDE.innerHTML = getHexString(this.cpu.DE, 4);\n    this.dbgHL.innerHTML = getHexString(this.cpu.HL, 4);\n    this.dbgPC.innerHTML = getHexString(this.cpu.PC);\n    this.dbgSP.innerHTML = getHexString(this.cpu.SP);\n\n    const joypadValue = this.memoryMap.read8(0xff00);\n    this.dbgJoypad.innerHTML = `${getBinaryString(joypadValue)} (${getHexString(\n      joypadValue,\n    )}) [${this.joypad.getPressedInputs().join(', ')}]`;\n\n    const nr11 = this.memoryMap.read8(0xff10);\n    const nr12 = this.memoryMap.read8(0xff11);\n    const nr13 = this.memoryMap.read8(0xff12);\n    const nr14 = this.memoryMap.read8(0xff13);\n    const nr15 = this.memoryMap.read8(0xff14);\n    this.dbgSound1.innerHTML = `\n      ${getBinaryString(nr11)}\n      ${getBinaryString(nr12)}\n      ${getBinaryString(nr13)}\n      ${getBinaryString(nr14)}\n      ${getBinaryString(nr15)}\n    `;\n\n    const nr21 = this.memoryMap.read8(0xff15);\n    const nr22 = this.memoryMap.read8(0xff16);\n    const nr23 = this.memoryMap.read8(0xff17);\n    const nr24 = this.memoryMap.read8(0xff18);\n    const nr25 = this.memoryMap.read8(0xff19);\n    this.dbgSound2.innerHTML = `\n      ${getBinaryString(nr21)}\n      ${getBinaryString(nr22)}\n      ${getBinaryString(nr23)}\n      ${getBinaryString(nr24)}\n      ${getBinaryString(nr25)}\n    `;\n\n    // TODO: Add toggle for serial data\n    // const serialDataString = this.cpu.serialData.map((value: number) => getHexString(value)).join(' ');\n    // const serialTextString = this.cpu.serialData.map((value: number) => String.fromCharCode(value)).join('');\n    // this.dbgSerial.innerHTML = `${serialDataString}<br/>${serialTextString}`;\n\n    const oamValues = [];\n    for (let i = 0; i < 40; i++) {\n      const y = this.memoryMap.read8(0xfe00 + i * 4);\n      const x = this.memoryMap.read8(0xfe00 + i * 4 + 1);\n      const id = this.memoryMap.read8(0xfe00 + i * 4 + 2);\n      const attrs = this.memoryMap.read8(0xfe00 + i * 4 + 3);\n      oamValues.push(`[${x}, ${y}, ${id}, ${getBinaryString(attrs)}]`);\n    }\n    this.dbgOam.innerHTML = oamValues.join('<br/>');\n\n    const lcdc = this.memoryMap.read8(0xff40);\n    const bgWindowEnable = lcdc & 1;\n    const objEnable = (lcdc & 2) >> 1;\n    const objSize = (lcdc & 4) >> 2;\n    const bgTileMap = (lcdc & 8) >> 3;\n    const tileSource = (lcdc & 16) >> 4;\n    const windowEnable = (lcdc & 32) >> 5;\n    const windowTileMap = (lcdc & 64) >> 6;\n    const lcdPpuEnable = (lcdc & 128) >> 7;\n\n    this.dbgLcdC.innerHTML = `\n      ${getBinaryString(lcdc)} (${getHexString(lcdc)})<br/>\n      LCD Enabled:   ${lcdPpuEnable}<br/>\n      Window Source: ${windowTileMap}<br/>\n      Window Enabled: ${windowEnable}<br/>\n      Tile Source: ${tileSource}<br/>\n      BG Source: ${bgTileMap}<br/>\n      Obj Size: ${objSize}<br/>\n      Obj Enabled: ${objEnable}<br/>\n      BG Enabled: ${bgWindowEnable}<br/>\n    `;\n\n    const colors = [0x00000000, 0xffaaaaaa, 0xff555555, 0xff000000];\n    const canvasWidth = this.dbgTilesCanvas.width;\n    const canvasHeight = this.dbgTilesCanvas.height;\n\n    const tileData = this.dbgTilesCtx.createImageData(\n      canvasWidth,\n      canvasHeight,\n    );\n    const pixelArray = new Uint32Array(tileData.data.buffer);\n    for (let i = 0; i < 384; i++) {\n      const address = 0x8000 + i * 16;\n      const x = (i * 8) % canvasWidth;\n      const y = Math.floor(i / (canvasWidth / 8)) * 8;\n\n      for (let row = 0; row < 8; row++) {\n        const byte1 = this.memoryMap.read8(address + row * 2);\n        const byte2 = this.memoryMap.read8(address + row * 2 + 1);\n        for (let column = 0; column < 8; column++) {\n          const bit1 = (byte1 >> (7 - column)) & 1;\n          const bit2 = (byte2 >> (7 - column)) & 1;\n          const colorValue = bit1 + (bit2 << 1);\n\n          const color = colors[colorValue];\n          const offset = (y + row) * canvasWidth + x + column;\n          pixelArray[offset] = color;\n        }\n      }\n    }\n    this.dbgTilesCtx.putImageData(tileData, 0, 0);\n\n    // Highlight sections if needed\n    // this.dbgTilesCtx.strokeStyle = '#00cefe';\n    // this.dbgTilesCtx.lineWidth = 0.5;\n    // this.dbgTilesCtx.strokeRect(0, 0, canvasWidth, canvasHeight / 3);\n    // this.dbgTilesCtx.strokeRect(0, canvasHeight / 3, canvasWidth, canvasHeight / 3);\n    // this.dbgTilesCtx.strokeRect(0, (canvasHeight / 3) * 2, canvasWidth, canvasHeight / 3);\n  };\n}\n","import GB from './core/GB';\n\n/**\n * Main entry point - hooks up UI, GB, and keyboard events\n */\nexport default function main(): void {\n  // Controls\n  const gameSelect = document.getElementById('game') as HTMLInputElement;\n  const pauseButton = document.getElementById('pause') as HTMLButtonElement;\n  const soundCheckBox = document.getElementById('sound') as HTMLInputElement;\n  const volumeSlider = document.getElementById('volume') as HTMLInputElement;\n\n  // UI\n  const canvas = document.getElementById('screen') as HTMLCanvasElement;\n\n  // Emulator\n  const gb = new GB(canvas);\n\n  // Hookup events\n  pauseButton.addEventListener('click', (evt) => {\n    const isPaused = gb.togglePause();\n    (evt.target as HTMLButtonElement).innerHTML = isPaused ? 'Resume' : 'Pause';\n  });\n\n  gameSelect.addEventListener('change', async (evt) => {\n    const files = (evt.target as HTMLInputElement).files;\n    if (files && files.length > 0) {\n      const arrayBuffer = await files[0].arrayBuffer();\n      gb.loadCart(arrayBuffer);\n    }\n    gameSelect.blur();\n  });\n\n  soundCheckBox.addEventListener('change', (evt) => {\n    if ((evt.target as HTMLInputElement).checked) {\n      gb.enableAudio();\n    } else {\n      gb.disableAudio();\n    }\n  });\n\n  volumeSlider.addEventListener('change', (evt) => {\n    gb.setVolume(parseInt((evt.target as HTMLInputElement).value, 10));\n  });\n\n  console.log('Starting...');\n}\n\nmain();\n"],"names":["$a2b27a708971f591f4f7de449c9993ca$export$914c8d181db73d64","$a2b27a708971f591f4f7de449c9993ca$export$621ff31337f92d1f","Z","N","H","C","$edd899225a99ebdfe89adc846f47ec92$export$947ce7175c599b59","value1","value2","plusOne","$63ed35e9ea847a5d73437a7fd6ebade9$export$7d52d1c8356c15d3","cpu","operands","readOperand","result","flagC","maskedResult","writeToOperand","OperandType","OperandModifier","type","$616a066871ba322dc128855ef3ccf4ab$export$4ae22175a8e93153","Register16","target","value","SP","write16","$4d8ba1b2b52f542a76f4e501549472bf$export$347808cbcf499a38","minusOne","isAddress","interruptsEnabled","jumpAddress","PC","read16","$b5d557fe2d3d34c3dc765866147f9382$export$9099ad97b570f7c","address","$616a066871ba322dc128855ef3ccf4ab$export$6572b76f07e1aaa8","$414dd65b233c0a1c48d92c18e07aa777$export$9099ad97b570f7c","0","action","$183a52be5be0bdd6f9001eb22422a90a$export$9099ad97b570f7c","mnemonic","bytes","cycles","1","$0735b084cec28c259f7fdc2b689fe320$export$9099ad97b570f7c","Immediate16","2","Register8","3","$e68ceb9f4d57e557594412558593e071$export$9099ad97b570f7c","4","5","$7a25269a778eb2d4b665161fe4bd106b$export$9099ad97b570f7c","6","Immediate8","7","$5af9af0ca3f77030ec4c2950edf8f717$export$9099ad97b570f7c","8","9","$627f3f67bacbe2e73195e1ddb29c5dc0$export$9099ad97b570f7c","10","11","12","13","14","15","$4fbd9aa759f183a26168441fceed1d50$export$9099ad97b570f7c","16","17","18","19","20","21","22","23","$a155fa430a7caa7a1f99018a88c123d9$export$9099ad97b570f7c","24","jumpOffset","Immediate8Signed","25","26","27","28","29","30","31","$f866ec11904a23767e26b2a0e7c197f8$export$9099ad97b570f7c","32","flagZ","33","34","modifier","Increment","35","36","37","38","39","A","flagN","flagH","40","41","42","43","44","45","46","47","48","49","50","Decrement","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","$f234d891bff745254a1968916fde4174$export$9099ad97b570f7c","145","146","147","148","149","150","151","152","$412df6c762ca609da3b9098f0bf6f55d$export$9099ad97b570f7c","153","154","155","156","157","158","159","160","$88fbffa2a0ecbc575ede398fe1e0b8b2$export$9099ad97b570f7c","161","162","163","164","165","166","167","168","$00ed62360f99acb7400076efed4de848$export$9099ad97b570f7c","169","170","171","172","173","174","175","176","$de91d4e04c23ab87b0af1b965c2a8e48$export$9099ad97b570f7c","177","178","179","180","181","182","183","184","$8aa6540f2e66e88d3997da1e6e5d07bf$export$9099ad97b570f7c","185","186","187","188","189","190","191","192","$2514e152a20be6b30b62b7b099c035af$export$9099ad97b570f7c","193","194","195","$ac5f97dd84648aac31d8b783277491e7$export$9099ad97b570f7c","196","$1b77baf0c8a70d4a4a6012a9b093fd43$export$9099ad97b570f7c","197","198","199","$ca69fc16fe1a4e5252d2839635141982$export$9099ad97b570f7c","200","201","202","204","205","206","207","208","209","210","212","213","214","215","216","217","$c8212a6d6c62d8925a70c84e04ec3ff9$export$9099ad97b570f7c","218","220","222","223","224","225","226","229","230","231","232","233","234","238","239","240","241","242","243","245","246","247","248","read8Signed","HL","249","250","251","254","255","bit","Math","pow","bitValue","$3bb738d1e749b1d11a64d5e7b0471cdb$export$9099ad97b570f7c","$c2fad5698db3da4732def3384adff5e7$export$9099ad97b570f7c","$6f827f92ee583ab9b7498b1fa8337a89$export$9099ad97b570f7c","$4276673695a7343174a02e899d712f2a$export$9099ad97b570f7c","$eff402b4486d714ff16351eaa6655c35$export$9099ad97b570f7c","$9a474b34a3f788bee03279086e25e3b2$export$9099ad97b570f7c","Value","$1d694bb01f9c391d429f3900ba61500c$export$9099ad97b570f7c","$abc3497e07b03719eb8fec94e6062f24$export$9099ad97b570f7c","203","211","219","221","227","228","235","236","237","244","252","253","$eb5ef047f84987e7ec283f2c9833a835$export$9099ad97b570f7c","getRegister","getRegister16","F","setRegister","setRegister16","this","memoryMap","step","cycleOffset","opHistory","registersBuffer","ArrayBuffer","registersView","DataView","dividerTick","timerTick","serialData","[object Object]","operand","read8","targetAddress","Error","write8","register","getUint8","getUint16","setUint8","setUint16","i","byteLength","updateDivider","updateTimer","handleInterrupt","opCode","isCbCode","opCodeTable","console","log","toString","operation","push","codeString","nextBytes","nextBytesSigned","length","shift","resultFlags","writeMasking","divider","timerControl","timerFreqFlag","timerFreq","timer","timerModulo","irq","irqe","interruptVector","bitMask","$5c74439a457436a976aeb1a3614fe64b$var$colors","$5c74439a457436a976aeb1a3614fe64b$var$bufferWidth","$5c74439a457436a976aeb1a3614fe64b$var$bufferHeight","$5c74439a457436a976aeb1a3614fe64b$var$ImageLayer","imageData","data","fill","pixelArray","Uint32Array","buffer","$5c74439a457436a976aeb1a3614fe64b$export$9099ad97b570f7c","canvas","lastUpdate","updateSamples","updateAverage","fpsSampleRate","currentScanline","currentScanlineOffset","lcdc","bgWindowEnable","objEnable","objSize","bgTileMap","tileSource","windowEnable","windowTileMap","lcdPpuEnable","stat","mode","coincidence","mode0HBlank","mode1VBlank","mode2Oam","myCoincidence","width","height","ctx","getContext","backgroundLayer","createImageData","windowLayer","spriteLayer","bufferLayer","bufferCanvas","document","createElement","bufferCtx","updateState","lcdStat","updatedLcdStat","updatedInterrupts","lycInterruptEnabled","mode2OAMInterruptEnabled","mode0HBlankInterruptEnabled","lcdStatInterrupt","scrollY","scrollX","windowY","windowX","clearRect","renderTileMap","startOffset","offset","renderLayer","renderSprites","renderFps","layer","x","y","putImageData","drawImage","floor","tileNumber","renderTile","tileDataLocationFlag","isSprite","tileSize","row","byte1","byte2","column","color","now","performance","updateTime","reduce","acc","val","fpsString","round","updateString","save","fillStyle","fillRect","textBaseline","fillText","restore","$334ca090794b09545c28c57b9b132688$var$INPUT_START","$334ca090794b09545c28c57b9b132688$var$INPUT_SELECT","$334ca090794b09545c28c57b9b132688$var$INPUT_DOWN","$334ca090794b09545c28c57b9b132688$var$INPUT_UP","$334ca090794b09545c28c57b9b132688$var$INPUT_LEFT","$334ca090794b09545c28c57b9b132688$var$INPUT_RIGHT","INPUT_TYPE","$334ca090794b09545c28c57b9b132688$var$INPUT_TYPE","$334ca090794b09545c28c57b9b132688$var$INPUT_BIT_MAP","INPUT_TYPE_BUTTON","mask","INPUT_TYPE_DIRECTION","$334ca090794b09545c28c57b9b132688$var$INPUT_KEY_MAP","w","a","s","d","ArrowUp","ArrowLeft","ArrowDown","ArrowRight","Enter","Shift","Control","$334ca090794b09545c28c57b9b132688$export$9099ad97b570f7c","inputPressed","pressedInputs","onKeyDown","evt","input","key","includes","onKeyUp","splice","indexOf","window","addEventListener","buttonBits","directionBits","forEach","inputDetails","joypadState","$eedf2c478d0a4defd8ef507b8c5c7de7$export$9099ad97b570f7c","cartDataBuffer","cartData","Uint8Array","memoryView","canRead","getInt8","fromAddress","memoryBuffer","hex","repeat","$b85a7f1ca39807e7aee9e2958fc91759$export$1e3271085946b10a","$80c9231b26377c3bf7bccda5bb7abead$export$9099ad97b570f7c","audioCtx","output","volume","isStarted","isMuted","gainNode","createGain","gain","setValueAtTime","currentTime","connect","oscillatorNode","createOscillator","start","frequency","$c97c48ff618106658aa2dd45bbf3834e$export$9099ad97b570f7c","clockOffset","AudioContext","masterGainNode","destination","channel1","channel2","updateChannel1","updateChannel2","suspend","setVolume","resume","details","getChannelDetails","setFrequency","envelopeInitialVolume","sweep","dutyAndLength","envelope","freqLowBits","freqHighBitsAndDetails","lengthSeconds","$8d56643e95126f7a2e8624160228773e$export$9099ad97b570f7c","isRunning","isPaused","isAudioEnabled","animationFrameRequest","update","requestAnimationFrame","joypad","tick","cpuSuccess","gpu","apu","updateDebug","dbgA","innerHTML","$8752f3a628f1ab1ae365f5759f705e66$export$9099ad97b570f7c","dbgF","dbgB","B","dbgC","dbgD","D","dbgE","E","dbgH","dbgL","L","dbgAF","AF","dbgBC","BC","dbgDE","DE","dbgHL","dbgPC","dbgSP","joypadValue","dbgJoypad","$f343c1bf3ccc6374b1c9d3b808f275f5$export$9099ad97b570f7c","getPressedInputs","join","nr11","nr12","nr13","nr14","nr15","dbgSound1","nr21","nr22","nr23","nr24","nr25","dbgSound2","oamValues","id","attrs","dbgOam","dbgLcdC","colors","canvasWidth","dbgTilesCanvas","canvasHeight","tileData","dbgTilesCtx","i1","init","getElementById","dbgSound3","dbgSound4","dbgSerial","pause","loadCart","reset","cancelAnimationFrame","gameSelect","pauseButton","soundCheckBox","volumeSlider","gb","togglePause","async","files","arrayBuffer","blur","checked","enableAudio","disableAudio","parseInt","$ffcbd7be3b79462db18a5338ad5e59c8$export$9099ad97b570f7c"],"version":3,"file":"index.8d6b4f44.js.map"}